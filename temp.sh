#!/bin/bash

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --ports | -P)
            shift
            ports="$1"
            ;;
        *)
            inputfile="$1"
            ;;
    esac
    shift
done

# Check if input file exists
if [[ ! -f $inputfile ]]; then
    echo "File $inputfile not found."
    exit 1
fi

# Set output file name
outputfile="wsf.$inputfile.txt"

# Clear output file if it already exists
if [[ -f "$outputfile" ]]; then
    echo "Clearing existing output file $outputfile"
    > "$outputfile"
fi

# Loop through IPs/hostnames in input file
while read -r line; do
    # Loop through ports
    for port in $(echo "$ports" | tr ',' ' '); do
        # Check if web service is running on HTTP
        http_status=$(curl -o /dev/null -s -w "%{http_code}\n" -m 5 "http://$line:$port")
        if [[ "$http_status" -ge 200 && "$http_status" -lt 400 ]]; then
            echo "HTTP service is running on http://$line:$port"
            echo "http://$line:$port" >> "$outputfile"
        fi

        # Check if web service is running on HTTPS
        https_status=$(curl -o /dev/null -s -w "%{http_code}\n" -m 5 "https://$line:$port")
        if [[ "$https_status" -ge 200 && "$https_status" -lt 400 ]]; then
            echo "HTTPS service is running on https://$line:$port"
            echo "https://$line:$port" >> "$outputfile"
        fi
    done
done < "$inputfile"

# Print results to screen and show where file was saved
if [[ -f "$outputfile" ]]; then
    echo ""
    echo -e "Results saved to \e[32m$outputfile\e[0m"
    cat "$outputfile" | awk {'print $NF'}
else
    echo "No results found."
fi
