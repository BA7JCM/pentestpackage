#!/bin/bash

clear
# Display banner
cat << "EOF"
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|e|n|t|e|s|t|P|a|c|k|a|g|e|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Script: web-service-finder.sh
    Author: Leon Teale
    Twitter: @leonteale
    Website: cyberwolf-security.co.uk
    Version: 2.0.0

EOF

# Display usage
function usage {
    echo "Usage: $0 [-h] [--ports PORTS] [--screenshot] inputfile"
    echo "Options:"
    echo "  -h, --help         Show this help message and exit"
    echo "  -P, --ports PORTS  Specify ports to scan (default: 80,443)"
    echo "  -s, --screenshot   Take screenshots of web services found"
    echo "  inputfile          File containing IP addresses or hostnames"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -P|--ports)
            shift
            ports="$1"
            ;;
        -s|--screenshot)
            screenshot=true
            ;;
        *)
            inputfile="$1"
            ;;
    esac
    shift
done

# Set default ports if not specified
if [[ -z "$ports" ]]; then
    ports="80,443"
fi

# Check if input file exists
if [[ ! -f $inputfile ]]; then
    echo "Error: File $inputfile not found."
    usage
    exit 1
fi

# Check if screenshot flag is set and command exists
if [[ "$screenshot" == true ]]; then
    command -v cutycapt >/dev/null 2>&1 || {
        echo >&2 "Error: cutycapt command not found."
        read -rp "Do you want to install it now? (y/n) " install_cutycapt
        if [[ "$install_cutycapt" == [yY] ]]; then
            echo "Installing dependencies..."
            sudo apt-get update && sudo apt-get install -y cutycapt xvfb
            echo "Done."
        else
            echo "Exiting."
            exit 1
        fi
    }
fi

# Set output file name
outputfile="wsf.$inputfile.txt"
outputfile_screenshots="${inputfile}_screnshots"

# Clear output file if it already exists
if [[ -f "$outputfile" ]]; then
    > "$outputfile"
fi

# Loop through IPs/hostnames in input file
echo "Scanning for web services..."
while read -r line; do
    # Loop through ports
    for port in $(echo "$ports" | tr ',' ' '); do
        # Check if web service is running on HTTP
        http_status=$(curl -o /dev/null -s -w "%{http_code}\n" -m 5 "http://$line:$port")
        if [[ "$http_status" -ge 200 && "$http_status" -lt 400 ]]; then
            echo "HTTP service is running on http://$line:$port"
            echo "http://$line:$port" >> "$outputfile"
        fi

        # Check if web service is running on HTTPS
        https_status=$(curl -o /dev/null -s -w "%{http_code}\n" -m 5 "https://$line:$port")
        if [[ "$https_status" -ge 200 && "$https_status" -lt 400 ]]; then
            echo "HTTPS service is running on https://$line:$port"
            echo "https://$line:$port" >> "$outputfile"
        fi
    done
done < "$inputfile"

# Print results to screen and show where file was saved
if [[ -f "$outputfile" ]]; then
    echo ""
    echo "Web services found:"

    cat "$outputfile" | awk {'print $NF'}

    if [[ "$screenshot" == true ]]; then
        echo ""
        echo "Taking screenshots..."
        echo "Screenshots saved to $outputfile_screenshots/"
        mkdir -p "$outputfile_screenshots"


        # Loop through URLs in output file and take screenshots
        while read -r url; do
            filename=$(echo "$url" | awk -F/ '{print $NF}')
            cutycapt --url="$url" --out="$outputfile_screenshots/$filename.png"
        done < "$outputfile"
    fi

else
    echo "No web services found."
fi
echo ""
