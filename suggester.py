#!/usr/bin/env python3

import os
import sys
import subprocess
import pandas as pd
import xml.etree.ElementTree as ET
from termcolor import colored
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from datetime import datetime
from tqdm import tqdm

# Banner and usage
BANNER = """
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|e|n|t|e|s|t|P|a|c|k|a|g|e|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Script: suggester.py
    Author: Leon Teale
    Twitter: @leonteale
    Website: cyberwolf-security.co.uk
    Version: 1.2.8
"""

USAGE = """
Usage: suggester.py [OPTION] [filename]
Options:
    [filename]    | Path to the input CSV or XML file containing service information.
    -a, --attack  | Enable attack mode to run predefined attacks on detected services.

Available Attack Modules:
    1. screenshotter

Example usage:
    python3 suggester.py services.csv
    python3 suggester.py -a nmap-scan.xml
"""

EXAMPLE_COMMANDS = {
    'afp': 'nmap -p 548 --script=afp-brute host',
    'asterisk': 'nmap -p 5038 --script=asterisk-info host',
    'bacnet': 'nmap -p 47808 --script=bacnet-info host',
    'bitcoin': 'nmap -p 8333 --script=bitcoin-info host',
    'bittorrent': 'nmap -p 6881 --script=bittorrent-discovery host',
    'cassandra': 'cqlsh host',
    'cifs': 'mount -t cifs //host/share /mnt',
    'cisco-smi': 'nmap -p 4786 host',
    'coap': 'nmap -p 5683 --script=coap-resources host',
    'couchdb': 'nmap -p 5984 --script=couchdb-databases host',
    'dhcp': 'nmap -p 67 --script=dhcp-discover host',
    'docker': 'docker info',
    'dns': 'nslookup -type=any domain host',
    'etcd': 'etcdctl --endpoints=http://host:2379 endpoint status',
    'finger': 'finger user@host',
    'ftp': 'ftp host or nmap -p 21 --script=ftp-anon,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221 host',
    'git': 'git clone user@host:/path/to/repository',
    'gopher': 'nmap -p 70 --script=gopher-ls host',
    'grafana': 'nmap -p 3000 --script=grafana-info host',
    'groovy': 'groovy -e "println \\"Hello, World!\\""',
    'grpc': 'nmap -p 50051 --script=grpc-info host',
    'hadoop': 'hdfs dfs -ls hdfs://host/',
    'http': 'nikto -h http://host or curl http://host',
    'http-proxy': 'nmap -p 8080 --script=http-proxy-brute host',
    'https': 'nikto -h https://host or curl https://host',
    'https-proxy': 'nmap -p 8080 --script=http-proxy-brute host',
    'icmp': 'ping host',
    'ike': 'ike-scan host',
    'imap': 'telnet host 143 or nmap -p 143 --script=imap-capabilities host',
    'imap3': 'telnet host 220 or nmap -p 220 --script=imap-capabilities host',
    'ipp': 'nmap -p 631 --script=ipp-enum host',
    'ipmi': 'nmap -p 623 --script=ipmi-version host or ipmitool -H host -U user -P pass chassis status',
    'iscsi-target': 'iscsiadm --mode discoverydb --type sendtargets --portal host --discover',
    'irc': 'nmap -p 6667 --script=irc-info host',
    'jenkins': 'nmap -p 8080 --script=jenkins-info host',
    'kafka': 'kafka-console-consumer --bootstrap-server host:9092 --topic topic_name',
    'kamailio': 'kamailio -L host',
    'kerberos': 'nmap -p 88 --script=krb5-enum-users host',
    'ldap': 'ldapsearch -x -h host',
    'memcached': 'nmap -p 11211 --script=memcached-info host',
    'mongodb': 'mongo host',
    'ms-sql-s': 'sqlcmd -S host -U username -P password -N -l 30',
    'ms-wbt-server': 'nmap -p 3389 --script=rdp-enum-encryption host',
    'mssql': 'sqlcmd -S host -U username -P password',
    'murmur': 'nmap -p 64738 --script=murmur-version host',
    'mysql': 'mysql -h host -u username -p',
    'netbios-ssn': 'nbtscan host',
    'nfs': 'showmount -e host',
    'nfs3': 'showmount -e host',
    'nfs4': 'nmap -p 2049 --script=nfs-showmount host',
    'nntp': 'nmap -p 119 --script=nntp-ntlm-info host',
    'ntp': 'nmap -sU -p 123 --script=ntp-info host',
    'ntp-monlist': 'nmap -p 123 --script=ntp-monlist host',
    'openvpn': 'openvpn --config client.ovpn',
    'oracle': 'tnsping host or sqlplus username/password@host',
    'puppet': 'nmap -p 8140 --script=puppet-info host',
    'pptp': 'nmap -p 1723 --script=pptp-version host',
    'postgresql': 'psql -h host -U username -W',
    'radius': 'nmap -p 1812,1813 --script=radius-info host',
    'radmin': 'nmap -p 4899 --script=radmin host',
    'redis': 'redis-cli -h host',
    'rdp': 'rdesktop host or nmap -p 3389 --script=rdp-enum-encryption,rdp-vuln-ms12-020 host',
    'rmi': 'nmap -p 1099 --script=rmi-dumpregistry host',
    'rmi-dump': 'nmap -p 1098 --script=rmi-dump host',
    'rmi-reg': 'nmap -p 1098 --script=rmi-dumpregistry host',
    'rsync': 'rsync host::',
    'rsyncd': 'rsync host::',
    's7': 'nmap -p 102 --script=s7-info host',
    'sccm': 'nmap -p 10123 --script=sccm-info host',
    'sdr': 'nmap -p 5556,5557 --script=sdr host',
    'sip': 'nmap -p 5060 --script=sip-enum-users host',
    'sip-tls': 'nmap -p 5061 --script=sip-enum-users host',
    'skype': 'nmap -p 1503,1504 --script=skype-info host',
    'smb': 'smbclient -L //host',
    'smb-enum-shares': 'enum4linux -U user -P password host',
    'smb-mbenum': 'nmap -p 445 --script=smb-mbenum host',
    'smtp': 'nmap -p 25 --script=smtp-commands host or swaks --to email@host',
    'smtp-enum-users': 'nmap -p 25 --script=smtp-enum-users host',
    'smtp-submission': 'nmap -p 587 --script=smtp-commands host',
    'snmp': 'snmpwalk -c public -v1 host or nmap -p 161 --script=snmp-info host',
    'snmptrap': 'snmptrap -v 2c -c public host 1.3.6.1.2.1.1.6 1.3.6.1.6.3.1.1.5.1',
    'socks5': 'nmap -p 1080 --script=socks5-info host',
    'socks-proxy': 'nmap -p 1080 --script=socks-proxy-brute host',
    'sphinx': 'searchd -c /path/to/sphinx.conf',
    'spring-rmi': 'nmap -p 1099 --script=spring-rmi-info host',
    'sqli': 'nmap -p 80,443 --script=http-sql-injection host',
    'squid': 'nmap -p 3128 --script=http-squid-proxy host',
    'ssh': 'ssh user@host or hydra -l user -P passlist.txt ssh://host',
    'ssh-keygen': 'ssh-keygen -t rsa -f keyfile',
    'ssl': 'nmap -p 443 --script=ssl-enum-ciphers host',
    'steam': 'nmap -p 27015 --script=steam-info host',
    'svn': 'svn checkout svn://host/repo',
    'tacacs': 'nmap -p 49 --script=tacacs-plus-brute host',
    'teamspeak': 'nmap -p 10011 --script=teamspeak2-version host',
    'telnet': 'telnet host 23 or nmap -p 23 --script=telnet-ntlm-info host',
    'tftp': 'tftp host GET file',
    'vcenter': 'Investigate with tools like PowerCLI',
    'vmauthd': 'nmap -p 902 --script=vmauthd-info host',
    'vmware': 'vmrun -T host -u user -p password list',
    'vsphere': 'vSphere PowerCLI commands',
    'vnc': 'nmap -p 5900 --script=vnc-info host or vncviewer host:5900',
    'whois': 'whois domain',
    'winrm': 'winrs -r:http://host:5985 -u:user -p:password "dir C:\\"',
    'x11': 'nmap -p 6000 --script=x11-info host',
    'xmpp': 'nmap -p 5222 --script=xmpp-info host',
    'zookeeper': 'zkCli.sh -server host:2181',
}

def print_banner():
    print(colored(BANNER, 'cyan'))
    if attack_mode:
        print(colored("\nATTACK MODE ENABLED\n", 'red'))

def check_requirements():
    required_modules = ['pandas', 'xml', 'selenium', 'termcolor', 'tqdm', 'webdriver_manager']
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            answer = input(colored(f"The '{module}' module is not installed. Would you like to install {module} now? (Y/N): ", 'yellow')).lower()
            if answer == 'y':
                subprocess.run([sys.executable, "-m", "pip", "install", module])
            else:
                print("This script requires the module to run. Exiting...")
                sys.exit(1)

    # Check for Chrome
    if os.system('which google-chrome-stable > /dev/null 2>&1') != 0:
        print(colored("Google Chrome is not installed. It is required for the 'screenshotter' attack module.", 'red'))
        sys.exit(1)
    else:
        print(colored("Checking requirements: ", 'yellow'), end='')
        print(colored("PASSED", "green"))

def parse_csv(file_path):
    return pd.read_csv(file_path)

def parse_xml(file_path):
    tree = ET.parse(file_path)
    root = tree.getroot()

    rows = []

    for host in root.findall('host'):
        address = host.find('address').get('addr')
        try:
            for port in host.find('ports').findall('port'):
                service = port.find('service').get('name')
                port_num = port.get('portid')
                rows.append((address, port_num, service))
        except:
            continue

    return pd.DataFrame(rows, columns=['address', 'port', 'service'])

def apply_example_commands(data):
    data['example_command'] = data.apply(lambda row: EXAMPLE_COMMANDS.get(row['service'], '').format(address=row['address'], port=row['port']), axis=1)
    return data

def save_to_csv(df, filename):
    timestamp = datetime.now().strftime('%Y-%m-%d-%H.%M')
    output_filename = f"{filename}-recommended_commands-{timestamp}.csv"
    df.to_csv(output_filename, index=False)
    print(f"\nOutput file saved to {output_filename}\n")
    return output_filename

def screenshotter(dataframe):
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    screenshot_dir = "Screenshotter"
    if not os.path.exists(screenshot_dir):
        os.makedirs(screenshot_dir)

    # Suppress warnings
    webdriver.remote.webdriver.WARNINGS_ENABLED = False

    service = Service(ChromeDriverManager().install())
    browser = webdriver.Chrome(service=service, options=options)

    screenshot_services = dataframe[dataframe['service'].str.contains('http|www', case=False, na=False)]

    print(f"\nFound {len(screenshot_services)} services to test for screenshots.\n")
    for _, row in tqdm(screenshot_services.iterrows(), total=screenshot_services.shape[0], desc="Screenshotting"):
        address = row['address']
        port = row['port']
        try:
            protocol = 'https' if 'https' in row['service'] else 'http'
            url = f"{protocol}://{address}:{port}"
            browser.get(url)
            screenshot_path = os.path.join(screenshot_dir, f"screenshot_{address}_{port}.png")
            browser.save_screenshot(screenshot_path)
        except Exception as e:
            print(f"\nError capturing screenshot for {url}. Error: {e}\n")

    browser.quit()
    print(f"\nScreenshotting complete. Images saved to '{screenshot_dir}' folder.")

    html_content = "<html><head><title>Screenshotter Results</title></head><body><table border='1'>"
    for _, row in screenshot_services.iterrows():
        address = row['address']
        port = row['port']
        screenshot_path = f"screenshot_{address}_{port}.png"
        html_content += f"<tr><td>{address}:{port}</td><td><img src='{screenshot_path}' width='400'></td></tr>"
    html_content += "</table></body></html>"

    html_filename = os.path.join(screenshot_dir, "results.html")
    with open(html_filename, 'w') as f:
        f.write(html_content)

    print(f"\nHTML report generated at '{html_filename}'.")

if __name__ == "__main__":
    check_requirements()

    # Arguments handling
    if len(sys.argv) < 2:
        print_banner()
        print(USAGE)
        sys.exit(1)

    attack_mode = False
    input_file = sys.argv[-1]

    if '-a' in sys.argv or '--attack' in sys.argv:
        attack_mode = True

    print_banner()

    # Read the file and determine its type
    try:
        data = parse_csv(input_file)
    except:
        try:
            data = parse_xml(input_file)
        except:
            print("Error: Invalid file format. Please provide a CSV or XML file.")
            sys.exit(1)

    # Apply example commands
    data_with_commands = apply_example_commands(data)

    # Save to CSV
    output_file = save_to_csv(data_with_commands, input_file.split('.')[0])

    if attack_mode:
        print("\nAttack 1: Screenshotter for Detected HTTP/WWW Services")
        confirmation = input("Do you want to perform this attack? (Y/N): ").lower()
        if confirmation == 'y':
            print("\nExecuting Screenshotter...\n")
            screenshotter(data_with_commands)


