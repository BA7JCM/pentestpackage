#!/usr/bin/env python3

import os
import sys
from termcolor import colored, cprint
import pandas as pd
from datetime import datetime
import xml.etree.ElementTree as ET

def banner():
    cprint('+-+-+-+-+-+-+-+-+-+-+-+-+-+-+', 'blue')
    cprint('|P|e|n|t|e|s|t|P|a|c|k|a|g|e|', 'yellow')
    cprint('+-+-+-+-+-+-+-+-+-+-+-+-+-+-+', 'blue')
    print(f"    Script: {os.path.basename(sys.argv[0])}")
    print("    Author: Leon Teale")
    print("    Twitter: @leonteale")
    print("    Website: cyberwolf-security.co.uk")
    print("    Version: 1.2.6")
    print()

def install_module(module_name):
    try:
        import pip
        pip.main(['install', module_name])
    except Exception as e:
        print(f"Error installing {module_name}. Please install it manually.")
        sys.exit(1)

def check_module_installed(module_name):
    try:
        __import__(module_name)
    except ImportError:
        return False
    return True

# Check for pandas
if not check_module_installed('pandas'):
    print("The 'pandas' module is not installed.")
    choice = input("Would you like to install pandas now? (Y/N): ").strip().lower()
    if choice == 'y':
        install_module('pandas')
    else:
        print("Exiting. Please install pandas and try again.")
        sys.exit(1)

# Check for termcolor
if not check_module_installed('termcolor'):
    print("The 'termcolor' module is not installed.")
    choice = input("Would you like to install termcolor now? (Y/N): ").strip().lower()
    if choice == 'y':
        install_module('termcolor')
    else:
        print("Exiting. Please install termcolor and try again.")
        sys.exit(1)

def read_csv(input_file_path):
    columns = ['host', 'port', 'proto', 'name', 'state', 'info']
    services_df = pd.read_csv(input_file_path, names=columns, skiprows=1)
    return services_df[services_df['state'] == 'open']

def read_xml(input_file_path):
    tree = ET.parse(input_file_path)
    root = tree.getroot()

    services_data = []

    for host in root.findall('host'):
        address = host.find('address').get('addr')
        ports = host.find('ports')
        for port in ports.findall('port'):
            service = port.find('service').get('name')
            state = port.find('state').get('state')
            portid = port.get('portid')
            services_data.append([address, portid, '', service, state, ''])

    return pd.DataFrame(services_data, columns=['host', 'port', 'proto', 'name', 'state', 'info'])

if len(sys.argv) < 2:
    banner()
    print("Usage: suggester.py [OPTION] [filename]")
    print("Options:")
    print("    [filename]    | Path to the input CSV or XML file containing service information.")
    print("    -a, --attack  | Enable attack mode to run predefined attacks on detected services.")
    print("\nExample usage:")
    print("    python3 suggester.py services.csv")
    print("    python3 suggester.py -a nmap-scan.xml")
    sys.exit(1)

attack_mode = False
if '-a' in sys.argv or '--attack' in sys.argv:
    attack_mode = True
    sys.argv.remove('-a') if '-a' in sys.argv else sys.argv.remove('--attack')

if len(sys.argv) != 2:
    print("Error: Invalid arguments. Use '-h' or '--help' for usage information.")
    sys.exit(1)

input_file_path = sys.argv[1]

if not os.path.exists(input_file_path):
    print("Error: File does not exist!")
    sys.exit(1)

# Determine file type and read accordingly
with open(input_file_path, 'r') as file:
    first_line = file.readline()
    if first_line.strip().startswith('<?xml'):
        open_services_df = read_xml(input_file_path)
    elif ',' in first_line:
        open_services_df = read_csv(input_file_path)
    else:
        print("Error: Invalid file format. Please provide a CSV or XML file.")
        sys.exit(1)

# Example commands for common services
example_commands = {
    'afp': 'nmap -p 548 --script=afp-brute host',
    'asterisk': 'nmap -p 5038 --script=asterisk-info host',
    'bacnet': 'nmap -p 47808 --script=bacnet-info host',
    'bitcoin': 'nmap -p 8333 --script=bitcoin-info host',
    'bittorrent': 'nmap -p 6881 --script=bittorrent-discovery host',
    'cassandra': 'cqlsh host',
    'cifs': 'mount -t cifs //host/share /mnt',
    'cisco-smi': 'nmap -p 4786 host',
    'coap': 'nmap -p 5683 --script=coap-resources host',
    'couchdb': 'nmap -p 5984 --script=couchdb-databases host',
    'dhcp': 'nmap -p 67 --script=dhcp-discover host',
    'docker': 'docker info',
    'dns': 'nslookup -type=any domain host',
    'etcd': 'etcdctl --endpoints=http://host:2379 endpoint status',
    'finger': 'finger user@host',
    'ftp': 'ftp host or nmap -p 21 --script=ftp-anon,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221 host',
    'git': 'git clone user@host:/path/to/repository',
    'gopher': 'nmap -p 70 --script=gopher-ls host',
    'grafana': 'nmap -p 3000 --script=grafana-info host',
    'groovy': 'groovy -e "println \\"Hello, World!\\""',
    'grpc': 'nmap -p 50051 --script=grpc-info host',
    'hadoop': 'hdfs dfs -ls hdfs://host/',
    'http': 'nikto -h http://host or curl http://host',
    'http-proxy': 'nmap -p 8080 --script=http-proxy-brute host',
    'https': 'nikto -h https://host or curl https://host',
    'https-proxy': 'nmap -p 8080 --script=http-proxy-brute host',
    'icmp': 'ping host',
    'ike': 'ike-scan host',
    'imap': 'telnet host 143 or nmap -p 143 --script=imap-capabilities host',
    'imap3': 'telnet host 220 or nmap -p 220 --script=imap-capabilities host',
    'ipp': 'nmap -p 631 --script=ipp-enum host',
    'ipmi': 'nmap -p 623 --script=ipmi-version host or ipmitool -H host -U user -P pass chassis status',
    'iscsi-target': 'iscsiadm --mode discoverydb --type sendtargets --portal host --discover',
    'irc': 'nmap -p 6667 --script=irc-info host',
    'jenkins': 'nmap -p 8080 --script=jenkins-info host',
    'kafka': 'kafka-console-consumer --bootstrap-server host:9092 --topic topic_name',
    'kamailio': 'kamailio -L host',
    'kerberos': 'nmap -p 88 --script=krb5-enum-users host',
    'ldap': 'ldapsearch -x -h host',
    'memcached': 'nmap -p 11211 --script=memcached-info host',
    'mongodb': 'mongo host',
    'ms-sql-s': 'sqlcmd -S host -U username -P password -N -l 30',
    'ms-wbt-server': 'nmap -p 3389 --script=rdp-enum-encryption host',
    'mssql': 'sqlcmd -S host -U username -P password',
    'murmur': 'nmap -p 64738 --script=murmur-version host',
    'mysql': 'mysql -h host -u username -p',
    'netbios-ssn': 'nbtscan host',
    'nfs': 'showmount -e host',
    'nfs3': 'showmount -e host',
    'nfs4': 'nmap -p 2049 --script=nfs-showmount host',
    'nntp': 'nmap -p 119 --script=nntp-ntlm-info host',
    'ntp': 'nmap -sU -p 123 --script=ntp-info host',
    'ntp-monlist': 'nmap -p 123 --script=ntp-monlist host',
    'openvpn': 'openvpn --config client.ovpn',
    'oracle': 'tnsping host or sqlplus username/password@host',
    'puppet': 'nmap -p 8140 --script=puppet-info host',
    'pptp': 'nmap -p 1723 --script=pptp-version host',
    'postgresql': 'psql -h host -U username -W',
    'radius': 'nmap -p 1812,1813 --script=radius-info host',
    'radmin': 'nmap -p 4899 --script=radmin host',
    'redis': 'redis-cli -h host',
    'rdp': 'rdesktop host or nmap -p 3389 --script=rdp-enum-encryption,rdp-vuln-ms12-020 host',
    'rmi': 'nmap -p 1099 --script=rmi-dumpregistry host',
    'rmi-dump': 'nmap -p 1098 --script=rmi-dump host',
    'rmi-reg': 'nmap -p 1098 --script=rmi-dumpregistry host',
    'rsync': 'rsync host::',
    'rsyncd': 'rsync host::',
    's7': 'nmap -p 102 --script=s7-info host',
    'sccm': 'nmap -p 10123 --script=sccm-info host',
    'sdr': 'nmap -p 5556,5557 --script=sdr host',
    'sip': 'nmap -p 5060 --script=sip-enum-users host',
    'sip-tls': 'nmap -p 5061 --script=sip-enum-users host',
    'skype': 'nmap -p 1503,1504 --script=skype-info host',
    'smb': 'smbclient -L //host',
    'smb-enum-shares': 'enum4linux -U user -P password host',
    'smb-mbenum': 'nmap -p 445 --script=smb-mbenum host',
    'smtp': 'nmap -p 25 --script=smtp-commands host or swaks --to email@host',
    'smtp-enum-users': 'nmap -p 25 --script=smtp-enum-users host',
    'smtp-submission': 'nmap -p 587 --script=smtp-commands host',
    'snmp': 'snmpwalk -c public -v1 host or nmap -p 161 --script=snmp-info host',
    'snmptrap': 'snmptrap -v 2c -c public host 1.3.6.1.2.1.1.6 1.3.6.1.6.3.1.1.5.1',
    'socks5': 'nmap -p 1080 --script=socks5-info host',
    'socks-proxy': 'nmap -p 1080 --script=socks-proxy-brute host',
    'sphinx': 'searchd -c /path/to/sphinx.conf',
    'spring-rmi': 'nmap -p 1099 --script=spring-rmi-info host',
    'sqli': 'nmap -p 80,443 --script=http-sql-injection host',
    'squid': 'nmap -p 3128 --script=http-squid-proxy host',
    'ssh': 'ssh user@host or hydra -l user -P passlist.txt ssh://host',
    'ssh-keygen': 'ssh-keygen -t rsa -f keyfile',
    'ssl': 'nmap -p 443 --script=ssl-enum-ciphers host',
    'steam': 'nmap -p 27015 --script=steam-info host',
    'svn': 'svn checkout svn://host/repo',
    'tacacs': 'nmap -p 49 --script=tacacs-plus-brute host',
    'teamspeak': 'nmap -p 10011 --script=teamspeak2-version host',
    'telnet': 'telnet host 23 or nmap -p 23 --script=telnet-ntlm-info host',
    'tftp': 'tftp host GET file',
    'vcenter': 'Investigate with tools like PowerCLI',
    'vmauthd': 'nmap -p 902 --script=vmauthd-info host',
    'vmware': 'vmrun -T host -u user -p password list',
    'vsphere': 'vSphere PowerCLI commands',
    'vnc': 'nmap -p 5900 --script=vnc-info host or vncviewer host:5900',
    'whois': 'whois domain',
    'winrm': 'winrs -r:http://host:5985 -u:user -p:password "dir C:\\"',
    'x11': 'nmap -p 6000 --script=x11-info host',
    'xmpp': 'nmap -p 5222 --script=xmpp-info host',
    'zookeeper': 'zkCli.sh -server host:2181',
}

# Apply the example commands
all_services_ports_summary = open_services_df.groupby(['name', 'port']).size().reset_index(name='occurrences')
all_services_ports_summary['example_command'] = all_services_ports_summary['name'].map(example_commands)
all_services_ports_summary['example_command'] = all_services_ports_summary['example_command'].fillna('Investigate with appropriate tools like nmap.')

# Generating the output file name
input_filename = os.path.basename(input_file_path).split('.')[0]
current_date_time = datetime.now().strftime('%Y-%m-%d-%H.%M')
output_file_name = f'{input_filename}-recommended_commands.{current_date_time}.csv'

# Save the DataFrame to CSV
all_services_ports_summary.to_csv(output_file_name, index=False)
print(f"\nOutput file saved to {output_file_name}")

if attack_mode:
    banner()
    cprint('ATTACK MODE ENABLED', 'red', attrs=['bold'])
    print("\nAttack 1: Example Attack on Detected Service")
    choice = input("Do you want to perform this attack? (Y/N): ").strip().lower()
    if choice == 'y':
        print("\nExecuting Attack 1...")
        # Logic for Attack 1 goes here

