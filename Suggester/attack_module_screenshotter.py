import os
import sys
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from tqdm import tqdm
from datetime import datetime

def screenshotter(dataframe, working_directory, input_filename):
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    # Getting the current date and time
    current_datetime = datetime.now().strftime('%Y-%m-%d-%H.%M')
    screenshot_dir = os.path.join(working_directory, f"{input_filename}-attackmodule-screenshotter")
    
    if not os.path.exists(screenshot_dir):
        os.makedirs(screenshot_dir)

    # Suppress warnings
    webdriver.remote.webdriver.WARNINGS_ENABLED = False

    service = Service(ChromeDriverManager().install())
    browser = webdriver.Chrome(service=service, options=options)

    screenshot_services = dataframe[dataframe['service'].str.contains('http|www', case=False, na=False)]

    print(f"\nFound {len(screenshot_services)} services to test for screenshots.\n")
    for _, row in tqdm(screenshot_services.iterrows(), total=screenshot_services.shape[0], desc="Screenshotting"):
        address = row['address']
        port = row['port']
        try:
            protocol = 'https' if 'https' in row['service'] else 'http'
            url = f"{protocol}://{address}:{port}"
            browser.get(url)
            screenshot_path = os.path.join(screenshot_dir, f"screenshot_{address}_{port}.png")
            browser.save_screenshot(screenshot_path)
        except Exception as e:
            print(f"\nError capturing screenshot for {url}. Error: {e}\n")

    browser.quit()
    print(f"\nScreenshotting complete. Images saved to '{screenshot_dir}' folder.")

    html_content = "<html><head><title>Screenshotter Results</title></head><body><table border='1'>"
    for _, row in screenshot_services.iterrows():
        address = row['address']
        port = row['port']
        screenshot_path = f"screenshot_{address}_{port}.png"
        html_content += f"<tr><td>{address}:{port}</td><td><img src='{screenshot_path}' width='400'></td></tr>"
    html_content += "</table></body></html>"

    html_filename = os.path.join(screenshot_dir, "results.html")
    with open(html_filename, 'w') as f:
        f.write(html_content)

    print(f"\nHTML report generated at '{html_filename}'.")

