import os
import pandas as pd
from xml.etree import ElementTree
from services_list import EXAMPLE_COMMANDS
from datetime import datetime
from termcolor import colored

def parse_csv(filepath):
    try:
        data = pd.read_csv(filepath)
        data.columns = [col.lower() for col in data.columns]  # Normalize column names
        return data
    except Exception as e:
        print(f"Error reading the CSV file: {e}")
        return pd.DataFrame()

def parse_xml(filename):
    try:
        tree = ElementTree.parse(filename)
        root = tree.getroot()

        # Check if the XML structure is of type 'host'
        if root.find('.//host'):
            service_data = [
                {
                    "ip": host.find("address").get("addr"),
                    "port": service.get("portid"),
                    "service": service.find("service").get("name") if service.find("service") is not None else "unknown"
                }
                for host in root.findall("host")
                for service in host.find("ports").findall("port")
            ]
        # Check if the XML structure is of type 'nmaprun'
        elif root.find('.//nmaprun'):
            service_data = [
                {
                    "ip": host.find("address").get("addr"),
                    "port": service.get("portid"),
                    "service": service.find("service").get("name") if service.find("service") is not None else "unknown"
                }
                for host in root.find("nmaprun").findall("host")
                for service in host.find("ports").findall("port")
            ]
        else:
            raise ValueError("Unexpected XML structure.")

        data = pd.DataFrame(service_data)
        data.columns = [col.lower() for col in data.columns]  # Normalize column names
        return data

    except Exception as e:
        print(colored(f"Error reading the XML file: {str(e)}", "red"))
        return None

def save_to_csv(data, working_directory, filename):
    timestamp = datetime.now().strftime('%Y-%m-%d')
    output_filename = os.path.join(working_directory, f"{filename}-recommended_commands-{timestamp}.csv")
    try:
        data.to_csv(output_filename, index=False)
        print(f"\nOutput file saved to {output_filename}\n")
        return output_filename
    except PermissionError:
        print(colored(f"Error: Permission denied when trying to save to {output_filename}. Please check the file and directory permissions.", "red"))
        return None
    except Exception as e:
        print(f"Error saving the CSV file: {e}")
        return None

def apply_example_commands(data):
    try:
        if "service" not in data.columns:  # Now it's in lowercase
            print(colored("Error: 'Service' column not found in the data.", "red"))
            return data

        def get_command(service_name):
            if service_name == "unknown":
                return "Consider manual inspection or using a tool like nmap's version detection."
            return EXAMPLE_COMMANDS.get(service_name, 'N/A')

        data['example_command'] = data['service'].apply(get_command)  # Now it's in lowercase
        return data

    except Exception as e:
        print(colored(f"Error applying example commands: {str(e)}", "red"))
        return None

