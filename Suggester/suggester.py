USAGE = '''
Usage: suggester.py [OPTION] [filename]
Options:
    [filename]    | Path to the input file containing service information.
    -a, --attack  | Enable attack mode to run predefined attacks on detected services.

Available Attack Modules:
    1. screenshotter (using the -a or --attack option activates this)

Example usage:
    python3 suggester.py services.csv
    python3 suggester.py -a nmap-scan.xml
'''

import argparse
import os
import sys
from datetime import datetime
from termcolor import colored
from utils import print_banner, check_requirements
from data_handlers import parse_csv, parse_xml, save_to_csv, apply_example_commands
from attack_module_screenshotter import screenshotter

def main():
    parser = argparse.ArgumentParser(description='Service Suggester Tool', usage=USAGE)
    parser.add_argument('filename', type=str, help='Path to the input file containing service information.')
    parser.add_argument('-a', '--attack', action='store_true', help='Enable attack mode to run predefined attacks on detected services.')
    args = parser.parse_args()

    # Determine file type based on content
    with open(args.filename, 'r', encoding='utf-8', errors='ignore') as file:
        initial_content = file.read(100)  # reading the first 100 characters
    if '<?xml' in initial_content:
        file_type = 'xml'
    elif ',' in initial_content:
        file_type = 'csv'
    else:
        print(colored("Error: Unrecognized file type. Please provide a valid CSV or XML file.", "red"))
        sys.exit(1)

    # Print the banner with attack_mode status
    print_banner(args.attack)


    # Parse the data based on the determined file type
    if file_type == 'csv':
        data = parse_csv(args.filename)
    elif file_type == 'xml':
        data = parse_xml(args.filename)

    # Extracting the input filename without its extension
    input_filename = os.path.basename(args.filename).split('.')[0]
    # Getting the current date
    current_date = datetime.now().strftime('%Y-%m-%d')
    # Constructing the desired directory name
    working_directory = f"Results-{input_filename}-{current_date}"

    if not os.path.exists(working_directory):
        os.makedirs(working_directory)
    
    # Apply example commands
    data_with_commands = apply_example_commands(data)

    # If attack mode is enabled, execute the attack module (currently only screenshotter)
    if args.attack:
        print(colored("----------", "green"))
        module_name = "screenshotter"
        print(colored(f"attack module: {module_name}", "green"))
        print(colored("------------------------------------", "green"))
        user_choice = input(colored(f"Do you want to run the {module_name} attack module? [y/N]: ", "yellow"))
        if user_choice.lower() == 'y':
            print(colored(f"Running attack module: {module_name}", "yellow"))
            screenshotter(data_with_commands, working_directory, input_filename)

    # Save the results to a CSV (this step can be adjusted based on requirements)
    save_to_csv(data_with_commands, working_directory, input_filename)

if __name__ == '__main__':
    main()

