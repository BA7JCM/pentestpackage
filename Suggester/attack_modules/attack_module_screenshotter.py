import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from tqdm import tqdm
from datetime import datetime

def generate_html_report(screenshot_services, screenshot_dir):
    html_content = "<html><head><title>Screenshotter Results</title></head><body><table border='1'>"
    for _, row in screenshot_services.iterrows():
        address = row['ip']
        port = row['port']
        protocol = 'https' if 'https' in row['service'] else 'http'
        screenshot_path = f"screenshot_{address}_{port}.png"
        full_path = os.path.join(screenshot_dir, screenshot_path)

        # Only add to the report if the screenshot exists
        if os.path.exists(full_path):
            html_content += f"<tr><td><a href='{protocol}://{address}:{port}' target='_blank'>{address}:{port}</a></td><td><img src='{screenshot_path}' width='400'></td></tr>"
    html_content += "</table></body></html>"
    return html_content

def screenshotter(dataframe, working_directory, input_filename):
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    # Define the timeout for the browser
    browser_timeout = 5  # in seconds

    screenshot_dir_name = f"{input_filename}-attackmodule-screenshotter"
    screenshot_dir = os.path.join(working_directory, screenshot_dir_name)

    if not os.path.exists(screenshot_dir):
        os.makedirs(screenshot_dir)

    # Suppress warnings
    webdriver.remote.webdriver.WARNINGS_ENABLED = False

    error_log = []

    try:
        service = Service(ChromeDriverManager().install())
        browser = webdriver.Chrome(service=service, options=options)
        browser.set_page_load_timeout(browser_timeout)  # setting timeout for page load
    except Exception as e:
        print(f"\nError initializing the browser. Error: {e}\n")
        return

    screenshot_services = dataframe[dataframe['service'].str.contains('http|www', case=False, na=False)]
    print(f"\nFound {len(screenshot_services)} services to test for screenshots.\n")

    for _, row in tqdm(screenshot_services.iterrows(), total=screenshot_services.shape[0], desc="Screenshotting", leave=True):
        address = row['ip']
        port = row['port']
        protocol = 'https' if 'https' in row['service'] else 'http'
        url = f"{protocol}://{address}:{port}"

        try:
            browser.get(url)
            screenshot_path = os.path.join(screenshot_dir, f"screenshot_{address}_{port}.png")
            browser.save_screenshot(screenshot_path)
        except Exception as e:
            error_log.append(f"Error capturing screenshot for {url}. Error: {e}")

    browser.quit()

    html_content = generate_html_report(screenshot_services, screenshot_dir)

    html_filename = os.path.join(screenshot_dir, "results.html")
    try:
        with open(html_filename, 'w') as f:
            f.write(html_content)
        print(f"\nHTML report generated at '{html_filename}'.")
    except Exception as e:
        print(f"\nError generating the HTML report. Error: {e}\n")

    # Logging errors
    if error_log:
        error_log_filename = os.path.join(screenshot_dir, f"{input_filename}-attackmodule-screenshotter-errors.log")
        with open(error_log_filename, 'w') as f:
            for error in error_log:
                f.write(f"{error}\n")
        print(f"\nDetailed errors have been logged to: '{error_log_filename}'.")

