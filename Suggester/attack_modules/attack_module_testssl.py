import subprocess
import os
import requests
from datetime import datetime
from termcolor import colored
from tqdm import tqdm
from requests.packages.urllib3.exceptions import InsecureRequestWarning

WEB_SERVICES = ["http", "https"]


# Suppress only the single InsecureRequestWarning from urllib3
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def tls_analysis(data, working_directory, input_filename):
    """
    Conducts a TLS analysis on identified HTTPS services.
    Uses the testssl.sh script for comprehensive TLS/SSL analysis.
    """

    testssl_path = "resources/testssl.sh/testssl.sh"
    if not os.path.exists(testssl_path):
        print(colored("Error: testssl.sh not found. Ensure it's located in 'resources/testssl.sh/'", "red"))
        return

    # Filter to get only the rows corresponding to web services (http & https)
    https_services = data[data['service'].isin(WEB_SERVICES)]

    print(colored(f"Identified {len(https_services)} potential HTTPS services.", "yellow"))

    for _, row in tqdm(https_services.iterrows(), total=len(https_services), desc="Analyzing", ncols=100):
        address, port, service = row['address'], row['port'], row['service']

        # Skip the HTTPS check for services running on port 80
        if port == '80':
            continue

        try:
            # For HTTPS services, ignore certificate errors during the initial check
            response = requests.get(f'https://{address}:{port}', timeout=5, verify=False)
            
            # Consider any 2xx and 3xx response as a valid HTTPS service
            if not (200 <= response.status_code < 400):
                print(colored(f"Service on {address}:{port} responded with an error: {response.status_code} {response.reason}", "red"))
                continue

        except requests.RequestException as e:
            print(colored(f"Error checking service on {address}:{port} - {str(e)}", "red"))
            continue

        # If the service passes the initial checks, run testssl.sh
        current_time = datetime.now().strftime('%H-%M-%S')
        output_path = f"{working_directory}/{input_filename}-attackmodule-tlsanalysis/tlsanalysis_{address}_{port}_{current_time}.txt"

        # Create directory if not exists
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        # Running the testssl.sh script and saving the output
        result = subprocess.run([testssl_path, "--logfile", output_path, f"{address}:{port}"], capture_output=True)

        # Print the result
        if result.returncode == 0:
            print(colored(f"Service on {address}:{port}: Completed", "green"))
        else:
            print(colored(f"Service on {address}:{port} encountered an error during testssl analysis.", "red"))

        # Uncomment this line if you want to see the stdout of testssl.sh
        # print(result.stdout.decode())

        print(colored(f"Results saved to {output_path}\n", "green"))
