import sys
from xml.etree import ElementTree as ET
from collections import defaultdict
import re

def print_usage():
    print("Usage: python script.py input.nessus [-s, --summary]")
    print("Process a .nessus file to group vulnerabilities by severity levels.")
    print("Options:")
    print("  -s, --summary   Group similar vulnerabilities together in the output")
    print("  -h, --help      Show this help message and exit")

def get_grouping_key(plugin_name):
    # Define custom grouping logic here
    # For example, grouping by common prefixes:
    prefixes = ['Apache Tomcat', 'QNAP QTS', 'CodeMeter', 'Splunk Enterprise']
    for prefix in prefixes:
        if plugin_name.startswith(prefix):
            return prefix
    return plugin_name  # Default to the full name if no prefix matches

def group_similar_vulnerabilities(vulnerabilities):
    grouped_vulnerabilities = defaultdict(lambda: {'details': [], 'references': set()})
    for plugin_name, data in vulnerabilities.items():
        # Determine the grouping key based on the custom function
        group_name = get_grouping_key(plugin_name)
        grouped_vulnerabilities[group_name]['details'].extend(data['details'])
        grouped_vulnerabilities[group_name]['references'].update(data['references'])
    return grouped_vulnerabilities

def process_nessus_file(nessus_file_path, summary=False):
    # Parsing the XML file
    tree = ET.parse(nessus_file_path)
    root = tree.getroot()

    # Grouping vulnerabilities by severity
    grouped_data = {4: defaultdict(lambda: {'details': [], 'references': set()}), 3: defaultdict(lambda: {'details': [], 'references': set()}), 2: defaultdict(lambda: {'details': [], 'references': set()}), 1: defaultdict(lambda: {'details': [], 'references': set()})}

    for report_host in root.findall(".//ReportHost"):
        ip_address = report_host.attrib.get("name")
        for report_item in report_host.findall(".//ReportItem"):
            severity = int(report_item.attrib.get("severity"))

            # Filtering by severity levels (low, medium, high, critical)
            if severity not in [1, 2, 3, 4]:
                continue

            port = report_item.attrib.get("port")
            protocol = report_item.attrib.get("protocol")
            plugin_name = report_item.attrib.get("pluginName")
            see_also = report_item.find(".//see_also")

            # Grouping by plugin_name and combining IP, port, and protocol details
            grouped_data[severity][plugin_name]['details'].append(f"{ip_address}:{port} ({protocol.upper()})")

            # Adding references if applicable
            if see_also is not None:
                references = see_also.text.split('\n')
                grouped_data[severity][plugin_name]['references'].update(references)  # Use update() to add unique references

    # Creating the output file names based on the input file name
    base_name = nessus_file_path.split('/')[-1].split('.')[0]
    txt_file_name = base_name + '.txt'
    html_file_name = base_name + '.html'

    # Writing the final data to a text file
    with open(txt_file_name, 'w') as txt_file:
        for severity in [4, 3, 2, 1]:
            severity_label = {4: "Critical", 3: "High", 2: "Medium", 1: "Low"}.get(severity)
            txt_file.write(f"{severity_label} Severity:\n")
            vulnerabilities = grouped_data[severity]
            if summary:
                vulnerabilities = group_similar_vulnerabilities(vulnerabilities)
            for plugin_name, data in vulnerabilities.items():
                txt_file.write(plugin_name + ":\n")
                for detail in data['details']:
                    txt_file.write(f"    {detail}\n")
                if data['references']:
                    txt_file.write("  References:\n")
                    for reference in list(data['references']):
                        txt_file.write(f"    {reference}\n")
            txt_file.write("\n")

    # Writing the final data to an HTML file
    with open(html_file_name, 'w') as html_file:
        html_file.write('<!DOCTYPE html>\n<html>\n<head>\n')
        html_file.write('<style>\n'
                        'body { background-color: #2c3e50; font-family: Arial, sans-serif; color: #ecf0f1; }\n'
                        '.severity { background-color: #34495e; color: white; padding: 10px; cursor: pointer; border-bottom: 1px solid #7f8c8d; }\n'
                        '.vulnerability { padding: 10px; }\n'
                        '.details { display: none; padding-left: 20px; }\n'
                        '.references { padding-left: 40px; color: #f39c12; }\n'
                        'h2, h3 { margin: 0; }\n'
                        'p { margin: 5px 0; }\n'
                        '</style>\n')
        html_file.write('<script>\n'
                        'function toggleDetails(element) { element.nextElementSibling.classList.toggle("details"); }\n'
                        '</script>\n')
        html_file.write('</head>\n<body>\n')

        for severity in [4, 3, 2, 1]:
            severity_label = {4: "Critical", 3: "High", 2: "Medium", 1: "Low"}.get(severity)
            html_file.write(f'<div class="severity" onclick="toggleDetails(this)"><h2>{severity_label} Severity</h2></div>\n')
            html_file.write('<div class="vulnerability">\n')
            vulnerabilities = grouped_data[severity]
            if summary:
                vulnerabilities = group_similar_vulnerabilities(vulnerabilities)
            for plugin_name, data in vulnerabilities.items():
                html_file.write(f'<h3 onclick="toggleDetails(this)">{plugin_name}</h3>\n')
                html_file.write('<div class="details">\n')
                for detail in data['details']:
                    html_file.write(f"<p>{detail}</p>\n")
                if data['references']:
                    html_file.write("<div class='references'>References:\n")
                    for reference in list(data['references']):
                        html_file.write(f"<p>{reference}</p>\n")
                    html_file.write("</div>\n")
                html_file.write('</div>\n')
            html_file.write('</div>\n')

        html_file.write('</body>\n</html>\n')

    print(f"Text file written to {txt_file_name}")
    print(f"HTML file written to {html_file_name}")

if __name__ == "__main__":
    summary = False
    if '-s' in sys.argv or '--summary' in sys.argv:
        summary = True
        sys.argv.remove('-s') if '-s' in sys.argv else sys.argv.remove('--summary')

    if len(sys.argv) != 2 or sys.argv[1] in ['-h', '--help']:
        print_usage()
        sys.exit(1)

    process_nessus_file(sys.argv[1], summary)

