import pandas as pd
import sys
from datetime import datetime

if len(sys.argv) != 2:
    print("Usage: python suggester.py input.file.txt")
    sys.exit(1)

# Path to the input CSV file
input_file_path = sys.argv[1]

# Reading the input CSV file
columns = ['host', 'port', 'proto', 'name', 'state', 'info']
services_df = pd.read_csv(input_file_path, names=columns, skiprows=1)

# Filtering only open services
open_services_df = services_df[services_df['state'] == 'open']

# Example commands for common services
example_commands = {
    'ftp': 'ftp host or nmap -p 21 --script=ftp-anon,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221 host',
    'http': 'nikto -h http://host or curl http://host',
    'https': 'nikto -h https://host or curl https://host',
    'ssh': 'ssh user@host or hydra -l user -P passlist.txt ssh://host',
    'telnet': 'telnet host 23 or nmap -p 23 --script=telnet-ntlm-info host',
    'smtp': 'nmap -p 25 --script=smtp-commands host or swaks --to email@host',
    'dns': 'nslookup -type=any domain host',
    'pop3': 'telnet host 110 or nmap -p 110 --script=pop3-capabilities host',
    'imap': 'telnet host 143 or nmap -p 143 --script=imap-capabilities host',
    'ldap': 'ldapsearch -x -h host',
    'smb': 'smbclient -L //host',
    'cifs': 'mount -t cifs //host/share /mnt',
    'snmp': 'snmpwalk -c public -v1 host or nmap -p 161 --script=snmp-info host',
    'sql': 'sqlcmd -S host -U username -P password',
    'rdp': 'rdesktop host or nmap -p 3389 --script=rdp-enum-encryption,rdp-vuln-ms12-020 host',
    'vnc': 'nmap -p 5900 --script=vnc-info host or vncviewer host:5900',
    'mysql': 'mysql -h host -u username -p',
    'postgresql': 'psql -h host -U username -W',
    'mssql': 'sqlcmd -S host -U username -P password',
    'oracle': 'tnsping host or sqlplus username/password@host',
    'nfs': 'showmount -e host',
    'tftp': 'tftp host GET file',
    'mongodb': 'mongo host',
    'redis': 'redis-cli -h host',
    'vcenter': 'Investigate with tools like PowerCLI',
    'xmpp': 'nmap -p 5222 --script=xmpp-info host',
    'kerberos': 'nmap -p 88 --script=krb5-enum-users host',
    'ipp': 'nmap -p 631 --script=ipp-enum host',
    'rsync': 'rsync host::',
    'rpcbind': 'rpcinfo -p host',
    'sip': 'nmap -p 5060 --script=sip-enum-users host',
    'rtsp': 'nmap -p 554 --script=rtsp-url-brute host',
    'ntp': 'nmap -sU -p 123 --script=ntp-info host',
    'cisco-smi': 'nmap -p 4786 host',
    'rmi': 'nmap -p 1099 --script=rmi-dumpregistry host',
    'ipmi': 'nmap -p 623 --script=ipmi-version host or ipmitool -H host -U user -P pass chassis status',
    'bittorrent': 'nmap -p 6881 --script=bittorrent-discovery host',
    'murmur': 'nmap -p 64738 --script=murmur-version host',
    'netbios-ssn': 'nbtscan host',
    'ms-wbt-server': 'nmap -p 3389 --script=rdp-enum-encryption host',
    # ... add more services as needed ...
}


# Grouping by both name and port for unique combinations
all_services_ports_summary = open_services_df.groupby(['name', 'port']).size().reset_index(name='occurrences')

# Applying the example commands
all_services_ports_summary['example_command'] = all_services_ports_summary['name'].map(example_commands)
all_services_ports_summary['example_command'] = all_services_ports_summary['example_command'].fillna('Investigate with appropriate tools like nmap.')

# Generating the output file name based on the input file name and current date and time (UK format)
input_filename = input_file_path.split('/')[-1].split('.')[0]
current_date_time = datetime.now().strftime('%Y-%m-%d-%H.%M')
output_file_name = f'{input_filename}-recommended_commands.{current_date_time}.csv'

# Path to save the output CSV file
output_file_path = output_file_name

# Saving the DataFrame to CSV
all_services_ports_summary.to_csv(output_file_path, index=False)

print(f"Output file saved to {output_file_path}")

