import pandas as pd
import sys
from datetime import datetime

if len(sys.argv) != 2:
    print("Usage: python suggester.py input.file.txt")
    sys.exit(1)

# Path to the input CSV file
input_file_path = sys.argv[1]

# Reading the input CSV file
columns = ['host', 'port', 'proto', 'name', 'state', 'info']
services_df = pd.read_csv(input_file_path, names=columns, skiprows=1)

# Filtering only open services
open_services_df = services_df[services_df['state'] == 'open']

# Example commands for common services
example_commands = {
    'dce-rpc': 'rpcclient -U "" host',
    'www': 'nikto -h http://host',
    'smb': 'smbclient -L //host',
    'cifs': 'mount -t cifs //host/share /mnt',
    'epmap': 'rpcdump.py host',
    'netbios-ns': 'nbtscan -r host/24',
    'dameware': 'nmap -p 6129 host',
    'ssdp': 'nmap -p 1900 --script=ssdp-discover host',
    'sccm_rcinfo': 'nmap -p 2701 --script=sccm-rc-info host',
    'ssh': 'ssh user@host or hydra -l user -P passlist.txt ssh://host',
    'llmnr': 'Monitor with Wireshark for LLMNR requests',
    'ntp': 'nmap -sU -p 123 --script=ntp-info host',
    'sip': 'nmap -p 5060 --script=sip-enum-users host',
    'giop': 'nmap -p 6410 --script=giop-info host',
    'ldap': 'ldapsearch -x -h host',
    'slp': 'nmap -p 427 --script=slp-info host',
    'cisco-smi': 'nmap -p 4786 host',
    'msmq': 'nmap -p 1801 --script=msmq-host-discover host',
    'dns': 'nslookup -type=any domain host',
    'mssql': 'sqlcmd -S host -U username -P password',
    'vnc': 'nmap -p 5900 --script=vnc-info host or vncviewer host:5900',
    'telnet': 'telnet host 23 or nmap -p 23 --script=telnet-ntlm-info host',
    'smtp': 'nmap -p 25 --script=smtp-commands host or swaks --to email@host',
    'tftp': 'tftp host GET file or nmap -sU -p 69 --script=tftp-enum host',
    'ipmi': 'nmap -p 623 --script=ipmi-version host or ipmitool -H host -U user -P pass chassis status',
}


# Grouping by both name and port for unique combinations
all_services_ports_summary = open_services_df.groupby(['name', 'port']).size().reset_index(name='occurrences')

# Applying the example commands
all_services_ports_summary['example_command'] = all_services_ports_summary['name'].map(example_commands)
all_services_ports_summary['example_command'] = all_services_ports_summary['example_command'].fillna('Investigate with appropriate tools like nmap.')

# Generating the output file name based on the input file name and current date and time (UK format)
input_filename = input_file_path.split('/')[-1].split('.')[0]
current_date_time = datetime.now().strftime('%Y-%m-%d-%H.%M')
output_file_name = f'{input_filename}-recommended_commands.{current_date_time}.csv'

# Path to save the output CSV file
output_file_path = output_file_name

# Saving the DataFrame to CSV
all_services_ports_summary.to_csv(output_file_path, index=False)

print(f"Output file saved to {output_file_path}")

