#!/bin/bash

# Display banner
cat << "EOF"
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|e|n|t|e|s|t|P|a|c|k|a|g|e|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Script: auto-iscsi.sh
    Author: Leon Teale
    Twitter: @leonteale
    Website: cyberwolf-security.co.uk
    Version: 1.0.0
EOF

# Define color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

USAGE='
Usage: auto-iscsi.sh [IP]
Options:
IP       | The IP address for the iSCSI target

Example usage:
./auto-iscsi.sh 10.133.36.191
'

# Check for root privileges
if [ "$(id -u)" != "0" ]; then
    echo -e "${RED}This script must be run as root${NC}" 1>&2
    exit 1
fi

# Check for correct number of arguments
if [ "$#" -ne 1 ]; then
    echo -e "$USAGE"
    exit 1
fi

IP=$1
MOUNT_DIR="/tmp/temp-$IP"

echo -e "\n${GREEN}Discovering iSCSI targets at IP: $IP${NC}\n"

# Discover the iSCSI targets
TARGETS=$(iscsiadm -m discovery -t st -p $IP)

# Check if any targets were found
if [ -z "$TARGETS" ]; then
    echo -e "${RED}No targets found at IP: $IP${NC}"
    exit 1
fi

# Extract the first target name
TARGET_NAME=$(echo "$TARGETS" | awk '{print $2}' | head -n1)

echo -e "Attempting to login to target: ${GREEN}$TARGET_NAME${NC}\n"

# Login to the target
iscsiadm --mode node --targetname $TARGET_NAME --portal $IP --login

if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to login to target${NC}"
    exit 1
fi

echo -e "Creating mount directory: ${GREEN}$MOUNT_DIR${NC}"
mkdir -p $MOUNT_DIR

echo -e "\nAttempting to mount ${GREEN}/dev/sdb2${NC} to ${GREEN}$MOUNT_DIR${NC}"

mount -o ro /dev/sdb2 $MOUNT_DIR

if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to mount /dev/sdb2${NC}"
    exit 1
fi

echo -e "${GREEN}Successfully mounted /dev/sdb2 to $MOUNT_DIR${NC}\n"

cd $MOUNT_DIR
ChatGPT
Your final script looks well-organized and should execute the given sequence of operations. Nice work incorporating the colorized output and structured usage help!

Here are a few optional considerations you might take into account:

Error Handling: You might want to add more granular error checking after each command to provide more specific error messages if something goes wrong.
Cleanup: Consider adding some cleanup operations in case of failure, like removing a directory if the mount operation fails.
Device Identification: The script currently hardcodes the device /dev/sdb2. Depending on the environment, this device might differ. You could try identifying the correct device dynamically based on the target information.
Check Dependencies: You might want to check if iscsiadm and other required tools are installed at the beginning of the script.
Other than these suggestions, your script looks professional and aligned with the requirements you've described. It should perform the desired iSCSI operations on the provided IP address.




User
is there a way to close that session?

 sudo ./auto-iscsi.sh 10.133.36.52
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|e|n|t|e|s|t|P|a|c|k|a|g|e|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Script: auto-iscsi.sh
    Author: Leon Teale
    Twitter: @leonteale
    Website: cyberwolf-security.co.uk
    Version: 1.0.0

Discovering iSCSI targets at IP: 10.133.36.52

Attempting to login to target: iqn.2007-11.com.nimblestorage:dll-nim-01-grp-g55a580a46de9ea75

iscsiadm: default: 1 session requested, but 1 already present.
iscsiadm: Could not log into all portals
Failed to login to target
Certainly! The error message you're seeing indicates that a session is already established for the target, so the script is unable to log in again.

To properly handle this, you can implement a part of the script to first log out of the existing session, if any, and then proceed to log in.

Here's an addition to your script to handle logging out:

bash
Copy code
# Check if already logged in to the target
EXISTING_SESSION=$(iscsiadm --mode session | grep "$TARGET_NAME")
if [ -n "$EXISTING_SESSION" ]; then
    echo -e "${RED}Existing session found for target: $TARGET_NAME${NC}"
    echo -e "Logging out of existing session...\n"
    iscsiadm --

