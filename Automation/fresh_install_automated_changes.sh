#!/bin/bash

display_banner() {
    cat << "EOF"
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|e|n|t|e|s|t|P|a|c|k|a|g|e|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Script: Fresh_installed_automated_changes.sh
    Author: Leon Teale
    Twitter: @leonteale
    Website: cyberwolf-security.co.uk
    Package: https://github.com/leonteale/pentestpackage
    Version: 1.2.5
EOF
}

RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
NC="\033[0m" # No Color
LOGFILE=~/FreshInstallerSetup.log  # Removed the double quotes for correct expansion
display_banner
echo -e "${YELLOW}\nStarting Setup at $(date)${NC}\n" | tee -a $LOGFILE
echo "Usage: bash $0"

log_msg() {
    echo -e "${GREEN}\n$1${NC}\n" | tee -a $LOGFILE
}

# Display a message about the log file
log_msg "A log file has been created at $LOGFILE"

handle_error() {
    echo -e "${RED}\nError encountered during $1${NC}\n" | tee -a $LOGFILE
}

log_msg "Checking internet connection..."
if ! ping -c 1 8.8.8.8 &>/dev/null; then
    echo -e "${RED}Internet connection not detected. Exiting...${NC}" | tee -a $LOGFILE
    exit 1
fi

OS=""
if grep -iq "kali" /etc/os-release; then
    OS="kali"
elif grep -iq "parrot" /etc/os-release; then
    OS="parrot"
fi

log_msg "Setting British keyboard layout..."
echo "setxkbmap gb" >> ~/.xprofile

log_msg "Updating system..."
if [ "$OS" == "kali" ]; then
    sudo apt update -y >> $LOGFILE 2>&1 && sudo apt upgrade -y >> $LOGFILE 2>&1
elif [ "$OS" == "parrot" ]; then
    sudo parrot-upgrade >> $LOGFILE 2>&1
fi

log_msg "Installing Zsh, Locate, Remmina, and i3..."
sudo apt install -y zsh locate remmina i3 >> $LOGFILE 2>&1
echo -e "${YELLOW}Please enter your password to change the default shell to Zsh:${NC}"
chsh -s $(which zsh)

# Print manual instructions
echo "Generating SSH key RSA"
ssh-keygen -t rsa
log_msg "Manual Steps:"
echo -e "1. Add your private ssh key to GitHub."
echo -e "   GitHub page: https://github.com/settings/ssh/new"
echo -e "   SSH public key: $(cat ~/.ssh/id_rsa.pub)\n${NC}"

# Clone repos
log_msg "Cloning common repositories..."
if [ ! -d ~/pentestpackage ]; then
    log_msg "Cloning pentestpackage repository..."
    git clone git@github.com:leonteale/pentestpackage.git || handle_error "git clone for pentestpackage"
else
    echo -e "${YELLOW}Directory 'pentestpackage' already exists, not cloning.${NC}"
fi

# Start and enable services to start on boot
log_msg "Starting PostgreSQL and enabling it to start on boot..."
sudo systemctl start postgresql >> $LOGFILE 2>&1
sudo systemctl enable postgresql >> $LOGFILE 2>&1

# Mount directories
log_msg "Mounting directories..."
[ ! -L "/Wordlists" ] && sudo ln -s /mnt/hgfs/Secure/Wordlists /Wordlists 2>/dev/null || echo -e "${YELLOW}Symbolic link '/Wordlists' already exists.${NC}"
[ ! -L "/Secure" ] && sudo ln -s /mnt/hgfs/Secure/Secure /Secure 2>/dev/null || echo -e "${YELLOW}Symbolic link '/Secure' already exists.${NC}"
[ ! -L "/Clients" ] && sudo ln -s /mnt/hgfs/Secure/Clients /Clients 2>/dev/null || echo -e "${YELLOW}Symbolic link '/Clients' already exists.${NC}"

# Append to ~/.zshrc
log_msg "Configuring .zshrc with custom aliases and functions..."
echo "alias gitgone='git add . && git commit -m \"Update\" && git push origin main'" >> ~/.zshrc
echo "alias vps='ssh -X leon@vps.cyberwolf-security.co.uk -D5291 -p49122'" >> ~/.zshrc
echo "alias sslcheck='~/pentestpackage/Utilities/sslcheck_script.sh $1'"

# Append the comb function and alias
echo "alias comb='comb_function'" >> ~/.zshrc
echo "comb_function() {" >> ~/.zshrc
echo "    domain=\"\$1\"" >> ~/.zshrc
echo "    h8mail -t \"\$domain\" -lb /Wordlists/leaks/COMB/CompilationOfManyBreaches/ --loose > \"/tmp/comb_\${domain}.txt\" &" >> ~/.zshrc
echo "}" >> ~/.zshrc

# Append nessus_summary function
echo "nessus_summary() {" >> ~/.zshrc
echo "    nessus_file=\"\$1\"" >> ~/.zshrc
echo "    python3 /home/kali/nessus_summary.py \"\$nessus_file\"" >> ~/.zshrc
echo "}" >> ~/.zshrc

# Append group-info function
echo "group-info() {" >> ~/.zshrc
echo "    user=\"\$1\"" >> ~/.zshrc
echo "    awk -v user=\"\$user\" 'BEGIN {print \"\033[0m--------------------------------------------\\n\033[32mUser: \" user \"\033[0m\"} \$0 ~ \"has member: .+\\\\\" user {split(\$0, a, \"'\\''\"); print \"Group Name:\", a[2]} END {print \"--------------------------------------------\"}' dcenum.txt | grep -i --color=always 'admin\\|'" >> ~/.zshrc
echo "}" >> ~/.zshrc


# Installing rdesktop
if ! sudo apt-get install rdesktop -y; then
    handle_error 'Installing rdesktop'
fi
# Installing tldr
if ! sudo apt-get install tldr -y; then
    handle_error 'Installing tldr'
fi
# Updating tldr
if ! tldr --update; then
    handle_error 'Updating tldr'
fi
# Installing pipx for crackmapexec
if ! python3 -m pip install pipx; then
    handle_error 'Installing pipx for crackmapexec'
fi
echo "Trying another method to install pipx just incase"
if ! sudo apt-get install pipx -y; then
    handle_error 'Installing pipx using apt-get'
fi
# Ensuring pipx path
if ! pipx ensurepath; then
    handle_error 'Ensuring pipx path'
fi
# Installing crackmapexec
if ! pipx install crackmapexec; then
    handle_error 'Installing crackmapexec'
fi

if ! pip3 install h8mail; then
    handle_error 'Installing h8mail'
fi


## Installing openAI stuff

# Installing llama python module
if ! pip install llama-cpp-python; then
    handle_error 'llama-cpp-python'
fi

# Installing openA-interpreter
if ! pip install open-interpreter; then
    handle_error 'open-interpreter'
fi

# Installing openai
if ! pip install openai; then
    handle_error 'openai'
fi

#install gobuster
sudo apt install gobuster


#Install additional programs:
#Nessus Pro
echo "Downloading Nessus Pro"
curl --request GET --url 'https://www.tenable.com/downloads/api/v2/pages/nessus/files/Nessus-10.5.4-ubuntu1404_amd64.deb'  --output ~/Downloads/Nessus-10.5.4-ubuntu1404_amd64.deb
echo "Installing Nessus Pro"
sudo dpkg -i ~/Downloads/Nessus-10.5.4-ubuntu1404_amd64.deb

#Burp Suite Pro
wget "https://portswigger-cdn.net/burp/releases/download?product=pro&version=2023.9.3&type=Linux" -O ~/Downloads/burpro.sh
echo "Burpsuite Pro installer located at: ~/Downloads/burpro.sh"
echo "Downloading Jython Stand alone file for Burp"
wget https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.3/jython-standalone-2.7.3.jar -O ~/Downloads/jython-standalone.jar 
echo "Jython downloaded and can be found here: ~/Downloads/jython-standalone.jar"

#Install disk analyser - cli
sudo apt install ncdu

#install the ALFA drivers
sudo apt install realtek-rtl88xxau-dkms

# Ask if the user wants to reboot
echo -e "${YELLOW}\nYou should probably reboot now. Do you want to reboot? (Y/n)${NC}"
read -r answer
if [[ $answer =~ ^[Yy]$ ]] || [[ -z $answer ]]; then
    sudo reboot
else
    log_msg "Alright, remember to reboot later for all changes to take effect!"
fi

