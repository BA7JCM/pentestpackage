#!/bin/bash

# Function to display the banner
display_banner() {
    cat << "EOF"
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|e|n|t|e|s|t|P|a|c|k|a|g|e|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Script: Fresh_installed_automated_changes.sh
    Author: Leon Teale
    Twitter: @leonteale
    Website: cyberwolf-security.co.uk
    Package: https://github.com/leonteale/pentestpackage
    Version: 2.0.0
EOF
}

# Define color variables
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
NC="\033[0m" # No Color

# Define log file
LOGFILE=~/FreshInstallerSetup.log
SUMMARY=""

# Function to log messages
log_msg() {
    echo -e "${GREEN}\n$1${NC}\n" | tee -a $LOGFILE
    SUMMARY="$SUMMARY\n$1"
}

# Function to handle errors
handle_error() {
    echo -e "${RED}\nError encountered during $1${NC}\n" | tee -a $LOGFILE
    while true; do
        echo -e "${YELLOW}Do you want to retry the step, skip it, or exit the script? (r/s/e)${NC}"
        read -r answer
        case $answer in
            [Rr]* ) return 1; break;;
            [Ss]* ) return 0; break;;
            [Ee]* ) exit 1;;
            * ) echo "Please answer r (retry), s (skip), or e (exit).";;
        esac
    done
}

# Function to fetch the latest Nessus Pro URL
fetch_nessus_pro_url() {
    curl -s https://www.tenable.com/downloads/api/v2/pages/nessus | grep -o 'https://www.tenable.com/downloads/api/v2/pages/nessus/files/Nessus-latest-ubuntu1404_amd64.deb'
}

# Display banner and start message
display_banner
echo -e "${YELLOW}\nStarting Setup at $(date)${NC}\n" | tee -a $LOGFILE

# Check internet connection
log_msg "Checking internet connection..."
if ! ping -c 1 8.8.8.8 &>/dev/null; then
    echo -e "${RED}Internet connection not detected. Exiting...${NC}" | tee -a $LOGFILE
    exit 1
fi

# Check if the OS is Kali
if ! grep -iq "kali" /etc/os-release; then
    echo -e "${RED}This script is intended for Kali Linux. Exiting...${NC}" | tee -a $LOGFILE
    exit 1
fi

# Set British keyboard layout
log_msg "Setting British keyboard layout..."
echo "setxkbmap gb" >> ~/.xprofile

# Enable SSH to autostart
sudo systemctl enable ssh
#Start SSH service
sudo systemctl start ssh

# Update and upgrade the system
log_msg "Updating system..."
while ! sudo apt update -y >> $LOGFILE 2>&1 && sudo apt upgrade -y >> $LOGFILE 2>&1; do
    handle_error "system update and upgrade" || break
done

# Install required packages
log_msg "Installing Zsh, Locate, Remmina, and i3..."
while ! sudo apt install -y zsh locate remmina i3 >> $LOGFILE 2>&1; do
    handle_error "installing Zsh, Locate, Remmina, and i3" || break
done

# Change default shell to Zsh
echo -e "${YELLOW}Please enter your password to change the default shell to Zsh:${NC}"
while ! chsh -s $(which zsh); do
    handle_error "changing default shell to Zsh" || break
done

# Generate SSH key
log_msg "Generating SSH key RSA"
while ! ssh-keygen -t rsa; do
    handle_error "generating SSH key" || break
done

# Manual steps reminder
log_msg "Manual Steps:"
echo -e "1. Add your private ssh key to GitHub."
echo -e "   GitHub page: https://github.com/settings/ssh/new"
echo -e "   SSH public key: $(cat ~/.ssh/id_rsa.pub)\n${NC}"

# Prompt user to continue after adding SSH key
while true; do
    echo -e "${YELLOW}When you have added the SSH key to GitHub, press C to continue or E to exit. (c/e)${NC}"
    read -r answer
    case $answer in
        [Cc]* ) break;;
        [Ee]* ) exit 1;;
        * ) echo "Please answer c (continue) or e (exit).";;
    esac
done

# Clone repositories
log_msg "Cloning common repositories..."
if [ ! -d ~/pentestpackage ]; then
    log_msg "Cloning pentestpackage repository..."
    while ! git clone git@github.com:leonteale/pentestpackage.git; do
        handle_error "cloning pentestpackage repository" || break
    done
else
    echo -e "${YELLOW}Directory 'pentestpackage' already exists, not cloning.${NC}"
fi

# Start and enable PostgreSQL service
log_msg "Starting PostgreSQL and enabling it to start on boot..."
while ! sudo systemctl start postgresql >> $LOGFILE 2>&1 || ! sudo systemctl enable postgresql >> $LOGFILE 2>&1; do
    handle_error "starting and enabling PostgreSQL" || break
done

# Mount directories
log_msg "Mounting directories..."
[ ! -L "/Wordlists" ] && sudo ln -s /mnt/hgfs/Secure/Wordlists /Wordlists 2>/dev/null || echo -e "${YELLOW}Symbolic link '/Wordlists' already exists.${NC}"
[ ! -L "/Secure" ] && sudo ln -s /mnt/hgfs/Secure/Secure /Secure 2>/dev/null || echo -e "${YELLOW}Symbolic link '/Secure' already exists.${NC}"
[ ! -L "/Clients" ] && sudo ln -s /mnt/hgfs/Secure/Clients /Clients 2>/dev/null || echo -e "${YELLOW}Symbolic link '/Clients' already exists.${NC}"

# Configure .zshrc with custom aliases and functions
log_msg "Configuring .zshrc with custom aliases and functions..."
{
echo "alias gitgone='git add . && git commit -m \"Update\" && git push origin main'"
echo "alias vps='ssh -X leon@vps.cyberwolf-security.co.uk -D5291 -p49122'"
echo "alias sslcheck='~/pentestpackage/Utilities/sslcheck_script.sh \$1'"

echo "alias comb='comb_function'"
echo "comb_function() {"
echo "    domain=\"\$1\""
echo "    h8mail -t \"\$domain\" -lb /Wordlists/leaks/COMB/CompilationOfManyBreaches/ --loose > \"/tmp/comb_\${domain}.txt\" &"
echo "}"

echo "nessus_summary() {"
echo "    nessus_file=\"\$1\""
echo "    python3 /home/kali/nessus_summary.py \"\$nessus_file\""
echo "}"

echo "function nessus() {"
echo "    if [[ \"\$1\" == \"--start\" ]]; then"
echo "        sudo /bin/systemctl start nessusd.service"
echo "        echo \"Nessus has been started.\""
echo "    elif [[ \"\$1\" == \"--stop\" ]]; then"
echo "        sudo /bin/systemctl stop nessusd.service"
echo "        echo \"Nessus has been stopped.\""
echo "    else"
echo "        echo \"Invalid argument. Use 'nessus --start' to start Nessus or 'nessus --stop' to stop Nessus.\""
echo "    fi"
echo "}"

echo "group-info() {"
echo "    user=\"\$1\""
echo "    awk -v user=\"\$user\" 'BEGIN {print \"\033[0m--------------------------------------------\\n\033[32mUser: \" user \"\033[0m\"} \$0 ~ \"has member: .+\\\\\" user {split(\$0, a, \"'\\''\"); print \"Group Name:\", a[2]} END {print \"--------------------------------------------\"}' dcenum.txt | grep -i --color=always 'admin\\|'"
echo "}"
} >> ~/.zshrc

# Install additional packages
log_msg "Installing additional packages..."
while ! sudo apt-get install -y rdesktop tldr pipx gobuster ncdu realtek-rtl88xxau-dkms; do
    handle_error "installing additional packages" || break
done

# Update tldr
while ! tldr --update; do
    handle_error "updating tldr" || break
done

# Ensure pipx path
while ! pipx ensurepath; do
    handle_error "ensuring pipx path" || break
done

# Install netexec (replacing crackmapexec)
log_msg "Installing netexec..."
while ! pipx install git+https://github.com/Pennyw0rth/NetExec; do
    handle_error "installing netexec" || break
done

# Ensure pipx path again for netexec
log_msg "Ensuring pipx path for netexec..."
while ! pipx ensurepath; do
    handle_error "ensuring pipx path for netexec" || break
done

# Install h8mail
while ! pip3 install h8mail; do
    handle_error "installing h8mail" || break
done

# Install OpenAI and related tools
log_msg "Installing OpenAI tools..."
while ! pip install llama-cpp-python open-interpreter openai; do
    handle_error "installing OpenAI tools" || break
done

# Install Nessus Pro
log_msg "Downloading and installing Nessus Pro..."
NESSUS_URL=$(fetch_nessus_pro_url)
if [ -z "$NESSUS_URL" ]; then
    handle_error "fetching Nessus Pro URL" || exit 1
fi
while ! curl --request GET --url "$NESSUS_URL" --output ~/Downloads/Nessus-ubuntu1404_amd64.deb; do
    handle_error "downloading Nessus Pro" || break
done
while ! sudo dpkg -i ~/Downloads/Nessus-ubuntu1404_amd64.deb; do
    handle_error "installing Nessus Pro" || break
done

# Install Burp Suite Pro and Jython
log_msg "Downloading Burp Suite Pro and Jython..."
while ! wget "https://portswigger-cdn.net/burp/releases/download?product=pro&version=2023.9.3&type=Linux" -O ~/Downloads/burpro.sh; do
    handle_error "downloading Burp Suite Pro" || break
done
while ! wget https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.3/jython-standalone-2.7.3.jar -O ~/Downloads/jython-standalone.jar; do
    handle_error "downloading Jython" || break
done
echo -e "${GREEN}Burp Suite Pro installer located at: ~/Downloads/burpro.sh${NC}"
echo -e "${GREEN}Jython downloaded and can be found here: ~/Downloads/jython-standalone.jar${NC}"

# Display summary of changes
log_msg "Summary of changes:"
echo -e "${SUMMARY}"

# Prompt for reboot
echo -e "${YELLOW}\nYou should probably reboot now. Do you want to reboot? (Y/n)${NC}"
read -r answer
if [[ $answer =~ ^[Yy]$ ]] || [[ -z $answer ]]; then
    sudo reboot
else
    log_msg "Alright, remember to reboot later for all changes to take effect!"
fi
