#!/bin/bash

USAGE='
Usage: script.sh [OPTION] [NETWORK_NAME]/[IPFILE]
Options:
-I, --ingress | Run ingress testing TO the CDE. Ensure you are connecting to a NON-CDE before running.
-E, --egress  | Run egress testing FROM the CDE. Ensure you are connected to the CDE before running.
-P, --icmp    | ICMP scan on a list of IP addresses [filename]
-h, --help    | This help and exit

Example usage:
./segmentation.sh --icmp    iplist.txt
./segmentation.sh --ingress [networkname] [scopefile]
./segmentation.sh --egress  [networkname] [scopefile]
'
missing_network_file_error="Error: No file supplied."
sudo_check_message="Please run the script using sudo since it is necessary for performing UDP scan"
invalid_option_error="Invalid option:"

if [[ "${EUID}" -ne 0 ]]; then
  echo "${sudo_check_message}"
  exit 1
fi

if [[ -z "$1" ]] || [[ -z "$(echo $1 | tr -d ' ')" ]]; then
  echo "You are missing a required syntax"
  echo -e "${USAGE}"
  exit 1
fi

validate_ip_file(){
  if [ $# -lt 1 ]; then
    echo "${missing_network_file_error}"
    exit 1
  fi
  if [[ ! -f "$1" || ! -r "$1" ]]; then
    echo "Error: '$1' is not a readable file or does not exist. $USAGE"
    exit 1
  fi
}

case "$1" in
  -I | --ingress )
  validate_ip_file "$3"
  echo "Performing ingress testing on CDE from $2"
  sudo xterm -e "bash -c 'nmap -sT -p- -Pn -T4 -oA nmap-TCP-$2-to-cde -n -iL $3 && exec bash' " &
  sudo xterm -e "bash -c 'nmap -sU -Pn -T4 -n -oA nmap-UDP-$2-to-cde -n -iL $3 && exec bash'" &
  ;;

    -E | --egress )
        validate_ip_file "$3"
        echo "Performing egress testing on $2 to CDE ($3)"
        sudo xterm -e "bash -c 'nmap -sT -p- -Pn -T4 -oA nmap-TCP-cde-to-$2 -n -iL $3 && sudo nmap -sU -Pn -T4 -n -oA nmap-UDP-cde-to-$2 -n -iL $3 && sudo nmap scanme.nmap.org -n -Pn -oA nmap-cde-to-internet && exec bash'" &
        ;;
    --icmp | -P )
        validate_ip_file "$2"
        ip_addresses=($(cat "$2"))
        for ip_address in "${ip_addresses[@]}"; do
          ping -c 1 -w 1 "$ip_address" >/dev/null
          if [ $? -eq 0 ]; then
            echo "$ip_address is up"
          else
            echo "$ip_address is down"
          fi
        done
        ;;
    -h | --help )
        echo -e "${USAGE}"
        ;;
    * )
        echo "$invalid_option_error $1"
        echo -e "${USAGE}"
        exit 1
        ;;
esac
