import os
import subprocess
import logging
from flask import Flask, request, render_template, redirect, url_for, flash, send_from_directory
from werkzeug.utils import secure_filename
from datetime import datetime

UPLOAD_FOLDER = '/var/www/html/dashboard/dev/pcap/uploads'
SENT_FOLDER = os.path.join(UPLOAD_FOLDER, 'sent')
ALLOWED_EXTENSIONS = {'pcap'}

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['SENT_FOLDER'] = SENT_FOLDER
app.secret_key = 'supersecretkey'

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def datetimeformat(value, format='%Y-%m-%d %H:%M:%S'):
    return datetime.fromtimestamp(value).strftime(format)

app.jinja_env.filters['datetimeformat'] = datetimeformat

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        files = request.files.getlist('file')
        if not files or all(f.filename == '' for f in files):
            flash('No selected file')
            return redirect(request.url)
        for file in files:
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        flash('Files successfully uploaded')
        return redirect(url_for('upload_file'))
    files = [f for f in os.listdir(app.config['UPLOAD_FOLDER']) if f != 'sent']
    file_details = [(f, os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f))) for f in files]
    return render_template('index.html', files=file_details)

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/submit', methods=['POST'])
def submit_files():
    email = request.form.get('email')
    if not email:
        flash('Email address is required')
        return redirect(url_for('upload_file'))

    files = request.form.getlist('files')
    if not files:
        flash('No files selected for submission')
        return redirect(url_for('upload_file'))

    # Ensure the sent directory exists
    os.makedirs(app.config['SENT_FOLDER'], exist_ok=True)

    for file in files:
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file)

        # Log the file path and check if it exists
        logger.info(f'Processing file: {filepath}')
        if not os.path.exists(filepath):
            logger.error(f'File does not exist: {filepath}')
            flash(f'File not found: {file}')
            continue
        
        # Log before running the command
        logger.info(f'Running command: /var/www/html/dashboard/dev/pcap/upload-unix.sh {filepath} {email}')
        command = f'/var/www/html/dashboard/dev/pcap/upload-unix.sh {filepath} {email}'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        # Log the result of the command
        logger.info(f'Command result: {result.returncode}')
        
        specific_error_message = "[+] No valid EAPOL handshake or PMKID found in the submitted file.Try another dump or contact us for manual check."
        
        if result.returncode == 0 and "File successfully uploaded" in result.stdout:
            sent_path = os.path.join(app.config['SENT_FOLDER'], file)
            logger.info(f'File should have been moved to: {sent_path}')
            flash(f'File submitted and moved to sent: {file}')
        else:
            logger.error(f'Failed to process file: {filepath}')
            if specific_error_message in result.stdout:
                flash(specific_error_message)
            else:
                flash(f'Failed to process file: {file}')
                flash(f'<pre>{result.stdout}</pre>')

    return redirect(url_for('upload_file'))

@app.route('/submit_single/<filename>', methods=['POST'])
def submit_single_file(filename):
    email = request.form.get('email')
    if not email:
        flash('Email address is required')
        return redirect(url_for('upload_file'))

    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    
    # Log the file path and check if it exists
    logger.info(f'Processing file: {filepath}')
    if not os.path.exists(filepath):
        logger.error(f'File does not exist: {filepath}')
        flash(f'File not found: {filename}')
        return redirect(url_for('upload_file'))
    
    # Ensure the sent directory exists
    os.makedirs(app.config['SENT_FOLDER'], exist_ok=True)
    
    # Log before running the command
    logger.info(f'Running command: /var/www/html/dashboard/dev/pcap/upload-unix.sh {filepath} {email}')
    command = f'/var/www/html/dashboard/dev/pcap/upload-unix.sh {filepath} {email}'
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    # Log the result of the command
    logger.info(f'Command result: {result.returncode}')
    
    specific_error_message = "[+] No valid EAPOL handshake or PMKID found in the submitted file.Try another dump or contact us for manual check."
    
    if result.returncode == 0 and "File successfully uploaded" in result.stdout:
        sent_path = os.path.join(app.config['SENT_FOLDER'], filename)
        logger.info(f'File should have been moved to: {sent_path}')
        flash(f'File submitted and moved to sent: {filename}')
    else:
        logger.error(f'Failed to process file: {filepath}')
        if specific_error_message in result.stdout:
            flash(specific_error_message)
        else:
            flash(f'Failed to process file: {filename}')
            flash(f'<pre>{result.stdout}</pre>')

    return redirect(url_for('upload_file'))

@app.route('/delete', methods=['POST'])
def delete_file():
    file = request.form.get('file')
    if file:
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file)
        os.remove(filepath)
        flash(f'{file} deleted')
    return redirect(url_for('upload_file'))

if __name__ == '__main__':
    app.run(debug=True)
