#!/bin/bash

# Set the OpenAI API authentication token
AUTH_TOKEN="Bearer <API-KEY>"

#This is the usage section
usage() {
  cat <<EOF
Usage: $0 [OPTIONS] PROMPT

Generate text or images using OpenAI's GPT-3.5 Turbo & GPT-4 API.

Options:
  --image PROMPT             Generate and display images based on PROMPT.
                             Optional: --variations=NUM to generate NUM variations (default is 1).
  --4 PROMPT                 Generate text using the GPT-4 API based on PROMPT. (Default uses GPT-3.5-Turbo)
  --help                     Display this help message.

Positional arguments:
  PROMPT                     The prompt to use for text or image generation.

API authentication:
  This script requires an OpenAI API key, which should be set in the AUTH_TOKEN variable.

Examples:

	./gpt.sh --image "a red apple on a white background"
	./gpt.sh --image "a person walking a dog" --variations=5
	./gpt.sh --4 "What is the meaning of life?"
	./gpt.sh "Tell me a joke."

EOF
}

# Check if --help option is used
if [[ "$1" == "--help" ]]; then
  usage
  exit 0
fi

# Check if the user provides at least one argument
if [[ $# -eq 0 ]]; then
  echo "Error: Missing arguments."
  usage
  exit 1
fi

# Check if the user provides a valid option
case "$1" in
  --image|--4)
    if [[ $# -lt 2 ]]; then
      echo "Error: Missing prompt."
      usage
      exit 1
    fi
    ;;
  *)
    if [[ $# -ne 1 ]]; then
      echo "Error: Invalid option or too many arguments."
      usage
      exit 1
    fi
    ;;
esac


#This now checks the passed to the script
#
#
# Check the arguments passed to the script
case "$1" in
  "--image")
    # Get the prompt from the arguments
    PROMPT="$2"

    # Set the number of variations to generate
    VARIATIONS=1
    if [[ "$3" =~ ^--variations=([1-9][0-9]*)$ ]]; then
      VARIATIONS="${BASH_REMATCH[1]}"
    fi

    # Generate and display the images
    for (( i=1; i<=$VARIATIONS; i++ )); do
      RESPONSE=$(curl -s https://api.openai.com/v1/images/generations \
        -H "Content-Type: application/json" \
        -H "Authorization: $AUTH_TOKEN" \
        -d '{
          "prompt": "'"$PROMPT"'",
          "size": "1024x1024"
        }')
      IMAGE_URL=$(echo "$RESPONSE" | jq -r '.data[0].url')
      mkdir -p ~/gptimages
      curl -s -o ~/gptimages/image_$i.png "$IMAGE_URL"
      xdg-open ~/gptimages/image_$i.png
    done
    ;;
  "--4")
   # Get the input message from the arguments
    PROMPT="$*"

    # Send a request to the OpenAI API to generate a response
    RESPONSE=$(curl -s -H "Content-Type: application/json" \
      -H "Authorization: $AUTH_TOKEN" \
      -d '{
         "model": "gpt-4",
         "messages": [{"role": "user", "content": "'"$PROMPT"'"}], 
         "temperature": 0.7
       }' https://api.openai.com/v1/chat/completions)

    # Parse the response to get the generated text
    GENERATED_TEXT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

    # Print the generated text
    echo "$GENERATED_TEXT"
 
    ;;
  *)
    # Get the input message from the arguments
    PROMPT="$*"

    # Send a request to the OpenAI API to generate a response
    RESPONSE=$(curl -s -H "Content-Type: application/json" \
      -H "Authorization: $AUTH_TOKEN" \
      -d '{
         "model": "gpt-3.5-turbo",
         "messages": [{"role": "user", "content": "'"$PROMPT"'"}], 
         "temperature": 0.7
       }' https://api.openai.com/v1/chat/completions)

    # Parse the response to get the generated text
    GENERATED_TEXT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

    # Print the generated text
    echo "$GENERATED_TEXT"
    ;;
esac

