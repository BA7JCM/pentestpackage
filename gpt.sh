#!/bin/bash

# Set the OpenAI API authentication token
AUTH_TOKEN="Bearer <API-KEY>"

# Check the arguments passed to the script
case "$1" in
  "--image")
    # Get the prompt from the arguments
    PROMPT="$2"

    # Set the number of variations to generate
    VARIATIONS=1
    if [[ "$3" =~ ^--variations=([1-9][0-9]*)$ ]]; then
      VARIATIONS="${BASH_REMATCH[1]}"
    fi

    # Generate and display the images
    for (( i=1; i<=$VARIATIONS; i++ )); do
      RESPONSE=$(curl -s https://api.openai.com/v1/images/generations \
        -H "Content-Type: application/json" \
        -H "Authorization: $AUTH_TOKEN" \
        -d '{
          "prompt": "'"$PROMPT"'",
          "size": "1024x1024"
        }')
      IMAGE_URL=$(echo "$RESPONSE" | jq -r '.data[0].url')
      mkdir -p ~/gptimages
      curl -s -o ~/gptimages/image_$i.png "$IMAGE_URL"
      xdg-open ~/gptimages/image_$i.png
    done
    ;;
  "--4")
   # Get the input message from the arguments
    PROMPT="$*"

    # Send a request to the OpenAI API to generate a response
    RESPONSE=$(curl -s -H "Content-Type: application/json" \
      -H "Authorization: $AUTH_TOKEN" \
      -d '{
         "model": "gpt-4",
         "messages": [{"role": "user", "content": "'"$PROMPT"'"}], 
         "temperature": 0.7
       }' https://api.openai.com/v1/chat/completions)

    # Parse the response to get the generated text
    GENERATED_TEXT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

    # Print the generated text
    echo "$GENERATED_TEXT"
 
    ;;
  *)
    # Get the input message from the arguments
    PROMPT="$*"

    # Send a request to the OpenAI API to generate a response
    RESPONSE=$(curl -s -H "Content-Type: application/json" \
      -H "Authorization: $AUTH_TOKEN" \
      -d '{
         "model": "gpt-3.5-turbo",
         "messages": [{"role": "user", "content": "'"$PROMPT"'"}], 
         "temperature": 0.7
       }' https://api.openai.com/v1/chat/completions)

    # Parse the response to get the generated text
    GENERATED_TEXT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

    # Print the generated text
    echo "$GENERATED_TEXT"
    ;;
esac

