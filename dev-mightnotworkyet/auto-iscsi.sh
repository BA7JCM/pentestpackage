#!/bin/bash

# Display banner
cat << "EOF"
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|e|n|t|e|s|t|P|a|c|k|a|g|e|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Script: auto-iscsi.sh
    Author: Leon Teale
    Twitter: @leonteale
    Website: cyberwolf-security.co.uk
    Version: 1.0.5
EOF

# Define color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Check if iscsiadm is installed
if ! command -v iscsiadm &> /dev/null; then
    echo -e "${RED}iscsiadm could not be found. Please install it first.${NC}"
    exit 1
fi

# Check for root privileges
if [ "$(id -u)" != "0" ]; then
    echo -e "${RED}This script must be run as root${NC}" 1>&2
    exit 1
fi

# Check for correct number of arguments
if [ "$#" -ne 1 ]; then
    echo -e "Usage: $0 [IP]"
    exit 1
fi

# Cleanup function
cleanup() {
    iscsiadm --mode node --targetname $TARGET_NAME --portal $IP --logout
    rmdir $MOUNT_DIR
    exit 1
}

IP=$1
MOUNT_DIR="/tmp/temp-$IP"
KNOWN_DEVICES=$(lsblk -o NAME | grep -E "^[a-z]+[0-9]*$" | tr '\n' ' ')

echo -e "\n${GREEN}Discovering iSCSI targets at IP: $IP${NC}\n"

# Discover the iSCSI targets
iscsiadm -m discovery -t st -p $IP

# Logout first to clear any existing sessions
iscsiadm --mode node --targetname $TARGET_NAME --portal $IP --logout

# Extract the first target name
TARGET_NAME=$(iscsiadm -m discovery -t st -p $IP | awk '{print $2}' | head -n1)

# Login to the target
iscsiadm --mode node --targetname $TARGET_NAME --portal $IP --login

# Wait for the device to be available
sleep 5

# Rescan SCSI bus to detect new devices
echo -e "Scanning for new devices..."
echo -n 1 > /sys/class/scsi_device/3:0:0:0/device/rescan

# Get new devices
NEW_DEVICES=$(lsblk -o NAME | grep -E "^[a-z]+[0-9]*$" | tr '\n' ' ')

# Convert KNOWN_DEVICES and NEW_DEVICES to arrays
KNOWN_DEVICES_ARRAY=($KNOWN_DEVICES)
NEW_DEVICES_ARRAY=($NEW_DEVICES)

# Find the new device
for dev in "${NEW_DEVICES_ARRAY[@]}"; do
    if [[ ! " ${KNOWN_DEVICES_ARRAY[@]} " =~ " ${dev} " ]]; then
        PARTITIONS=$(lsblk -o NAME | grep -E "^${dev}[0-9]+")
        if [ -n "$PARTITIONS" ]; then
            DEVICE_PATH="/dev/$(echo "$PARTITIONS" | head -n1)"
            break
        fi
    fi
done

if [ -z "$DEVICE_PATH" ]; then
    echo -e "${RED}Failed to find a device path${NC}"
    cleanup
fi

echo -e "Creating mount directory: ${GREEN}$MOUNT_DIR${NC}"
mkdir -p $MOUNT_DIR

echo -e "\nAttempting to mount ${GREEN}$DEVICE_PATH${NC} to ${GREEN}$MOUNT_DIR${NC}"

mount -o ro $DEVICE_PATH $MOUNT_DIR

if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to mount $DEVICE_PATH${NC}"
    cleanup
fi

echo -e "${GREEN}Successfully mounted $DEVICE_PATH to $MOUNT_DIR${NC}\n"

cd $MOUNT_DIR
