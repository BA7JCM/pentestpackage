#!/bin/bash

# Colors
red=$(tput setaf 1)
yellow=$(tput setaf 3)
green=$(tput setaf 2)
normal=$(tput sgr0)

# Function to send PUT request
send_request() {
  local url="$1"
  local data="$2"
  local content_type="$3"

  echo "${yellow}Sending PUT request to $url...${normal}"

  # Use curl with -L to follow redirects
  response=$(curl -i -s -L -X PUT -H "Content-Type: $content_type" -d "$data" "$url")

  if [[ "$response" =~ "200 OK" ]]; then
    echo "${green}Success!${normal}"
  else
    echo "${red}Failed. Server response:${normal}"
    echo "$response" | grep "HTTP/"
  fi
}

# Help function
print_help() {
  echo "Usage: $0 [URL]"
  echo "This script sends HTTP PUT requests to a specified target web server."
  echo "Options:"
  echo "  -h, --help    Show this help message and exit."
}

# Check for help option
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  print_help
  exit 0
fi

# Get target URL
target="${1:-$(read -e -p "Enter Target Web Server (e.g. http://domain.com:8080): " && echo "$REPLY")}"

# Check for curl
if ! command -v curl &> /dev/null; then
  echo "${red}Error: curl not found. Please install curl and try again.${normal}"
  exit 1
fi

# Check URL format
if [[ ! "$target" =~ ^http[s]?:// ]]; then
  echo "${red}Error: Invalid URL format. Make sure it starts with http:// or https://.${normal}"
  exit 1
fi

# Method 1: Sending sample XML data
sample_xml="<sample><data>Example XML</data></sample>"
send_request "$target/newpage" "$sample_xml" "application/xml; charset=utf-8"

# Method 2: Sending plain text or data
send_request "$target/new_page" "text or data to put" "application/json"

echo ""

