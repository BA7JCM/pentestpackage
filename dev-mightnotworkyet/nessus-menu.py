import requests
import json
import time
import urllib3
import getpass

# Suppress warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Colored output
RED = "\033[1;31m"
GREEN = "\033[1;32m"
RESET = "\033[0m"

# Nessus server details
NESSUS_URL = 'https://10.0.1.179:8834'

# Function to login and get the token
def get_token(username, password):
    try:
        login_data = {"username": username, "password": password}
        response = requests.post(f'{NESSUS_URL}/session', json=login_data, verify=False)
        return json.loads(response.text).get("token")
    except Exception as e:
        print(f"{RED}Error: {e}{RESET}")
        exit(1)

# Function to list scans based on status
def list_scans(status, token):
    scan_ids = []
    try:
        headers = {'X-Cookie': f'token={token}'}
        response = requests.get(f'{NESSUS_URL}/scans', headers=headers, verify=False)
        scans = json.loads(response.text).get("scans", [])
        for i, scan in enumerate(scans):
            if scan.get("status") == status:
                print(f"{i+1}. ID: {scan['id']}, Name: {scan['name']}")
                scan_ids.append(scan['id'])
        return scan_ids
    except Exception as e:
        print(f"{RED}Error: {e}{RESET}")
        return []

# Function to export scan
def export_scan(token, scan_ids):
    print("\nAvailable Scans for Export:")
    scan_ids = list_scans("completed", token)
    if not scan_ids:
        print(f"{RED}No completed scans available for export.{RESET}")
        return

    try:
        choice = int(input("\nEnter the number corresponding to the scan you want to export: ")) - 1
        scan_id = scan_ids[choice]
        headers = {'X-Cookie': f'token={token}'}
        data = {"format": "nessus"}
        response = requests.post(f'{NESSUS_URL}/scans/{scan_id}/export', json=data, headers=headers, verify=False)
        file_id = json.loads(response.text).get("file", 0)

        # Check export status and download the file
        max_retries = 10
        retries = 0
        while True:
            if retries >= max_retries:
                print(f"{RED}Export timed out. Please try again later.{RESET}")
                break
            response = requests.get(f'{NESSUS_URL}/scans/{scan_id}/export/{file_id}/status', headers=headers, verify=False)
            status = json.loads(response.text).get("status", "error")
            if status == "ready":
                break
            time.sleep(5)
            retries += 1

        # Download the file
        response = requests.get(f'{NESSUS_URL}/scans/{scan_id}/export/{file_id}/download', headers=headers, verify=False)
        with open(f"scan_{scan_id}.nessus", "wb") as f:
            f.write(response.content)
        print(f"{GREEN}Scan exported successfully. File saved as scan_{scan_id}.nessus{RESET}")

    except IndexError:
        print(f"{RED}Invalid choice. Please try again.{RESET}")
    except Exception as e:
        print(f"{RED}Error: {e}{RESET}")

# Function to start a scan
def start_scan(token):
    try:
        policy_uuid = input("Enter the policy UUID: ")
        headers = {'X-Cookie': f'token={token}'}
        data = {"uuid": policy_uuid, "settings": {"name": "New Scan", "text_targets": "192.168.0.1"}}
        response = requests.post(f'{NESSUS_URL}/scans', json=data, headers=headers, verify=False)
        print(f"{GREEN}Scan started.{RESET}")
    except Exception as e:
        print(f"{RED}Error: {e}{RESET}")

# Main function
def main():
    username = input("Enter your Nessus username: ")
    password = getpass.getpass("Enter your Nessus password: ")
    token = get_token(username, password)

    while True:
        print("\nMenu:")
        print("1. List Running Scans")
        print("2. List Completed Scans")
        print("3. Export Scan")
        print("4. Start a Scan")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            list_scans("running", token)
        elif choice == "2":
            list_scans("completed", token)
        elif choice == "3":
            export_scan(token, [])
        elif choice == "4":
            start_scan(token)
        elif choice == "5":
            print(f"{GREEN}Exiting...{RESET}")
            break
        else:
            print(f"{RED}Invalid choice. Please try again.{RESET}")

if __name__ == "__main__":
    main()
