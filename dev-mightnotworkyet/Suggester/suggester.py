USAGE = '''
Usage: suggester.py [OPTION] [filename]
    Options:
[filename]    | Path to the input file containing service information.
-a, --attack  | Enable attack mode to run predefined attacks on detected services.

    Available Attack Modules:
1. screenshotter    (using the -a or --attack option activates this)
2. testssl          (using the -a or --attack option activates this)

    Example usage:
python3 suggester.py services.csv
python3 suggester.py -a nmap-scan.xml
'''

import argparse
import os
import sys
from datetime import datetime
from termcolor import colored
from utils import print_banner, check_requirements
from data_handlers import parse_csv, parse_xml, save_to_csv, apply_example_commands
from attack_modules.attack_module_screenshotter import screenshotter
from attack_modules.attack_module_testssl import tls_analysis
from attack_modules.attack_module_testssl_ciphers_table import generate_tls_cipher_tables

sys.path.append(os.path.dirname(os.path.abspath(__file__)))


def run_attack_module(data_with_commands, working_directory, input_filename, module_name, module_func):
    separator = "-" * 40
    print(colored("\n" + separator, "green"))  # Adding a newline for spacing
    print(colored(f"attack module: {module_name}", "green"))
    print(colored(separator, "green"))

    user_choice = input(colored(f"Do you want to run the {module_name} attack module? [Y/n]: ", "yellow"))
    if not user_choice or user_choice.lower() == 'y':
        print(colored(f"\nRunning attack module: {module_name}", "yellow"))
        module_func(data_with_commands, working_directory, input_filename)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("file_path", help="Path to the input file containing service information.")
    parser.add_argument("-a", "--attack", help="Enable attack mode to run predefined attacks on detected services.", action="store_true")
    args = parser.parse_args()
    file_path = args.file_path

    # Determine file type based on content
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
        initial_content = file.read(100)  # reading the first 100 characters
        if '<?xml' in initial_content:
            file_type = 'xml'
        elif ',' in initial_content:
            file_type = 'csv'
        else:
            print(colored("Error: Unrecognized file type. Please provide a valid CSV or XML file.", "red"))
            sys.exit(1)

    # Print the banner with attack_mode status
    print_banner(args.attack)

    # Parse the data based on the determined file type
    if file_type == 'csv':
        data = parse_csv(file_path)
    elif file_type == 'xml':
        data = parse_xml(file_path)

    # Rename the "address" column to "ip" if it exists
    if "address" in data.columns:
        data.rename(columns={"address": "ip"}, inplace=True)

    # Extracting the input filename without its extension
    input_filename = os.path.basename(file_path).split('.')[0]
    # Getting the current date
    current_date = datetime.now().strftime('%Y-%m-%d')
    # Constructing the desired directory name
    working_directory = f"Results-{input_filename}-{current_date}"

    if not os.path.exists(working_directory):
        os.makedirs(working_directory)

    # Apply example commands
    data_with_commands = apply_example_commands(data, file_path)

    # Save the results to a CSV (this step can be adjusted based on requirements)
    save_to_csv(data_with_commands, working_directory, input_filename)

    # If attack mode is enabled, execute the attack modules
    if args.attack:
        print("Debug: DataFrame columns are:", data_with_commands.columns)
        run_attack_module(data_with_commands, working_directory, input_filename, "screenshotter", screenshotter)
        run_attack_module(data_with_commands, working_directory, input_filename, "testssl", tls_analysis)


if __name__ == '__main__':
    main()
