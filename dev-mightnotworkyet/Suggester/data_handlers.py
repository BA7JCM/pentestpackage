import os
import pandas as pd
from xml.etree import ElementTree
from services_list import EXAMPLE_COMMANDS
from datetime import datetime
from termcolor import colored

# Define the debug mode flag
DEBUG_MODE = False

# Define a function for debug printing
def print_debug(message):
    if DEBUG_MODE:
        print(message)

def parse_csv(filepath):
    try:
        data = pd.read_csv(filepath)
        data.columns = [col.lower() for col in data.columns]  # Normalize column names
        print_debug("Debug: DataFrame columns are: " + str(data.columns))
        return data
    except Exception as e:
        print(f"Error reading the CSV file: {e}")
        return pd.DataFrame()

def parse_xml(filename):
    try:
        tree = ElementTree.parse(filename)
        root = tree.getroot()

        def get_domain_or_ip(host):
            hostname_element = host.find('hostnames').find('hostname')
            return hostname_element.get('name') if hostname_element is not None else host.find("address").get("addr")

        service_data = []
        for host in root.findall("host"):
            for service in host.find("ports").findall("port"):
                service_data.append({
                    "ip": get_domain_or_ip(host),
                    "port": service.get("portid"),
                    "service": service.find("service").get("name") if service.find("service") is not None else "unknown"
                })

        data = pd.DataFrame(service_data)
        data.columns = [col.lower() for col in data.columns]  # Normalize column names
        print_debug("Debug: DataFrame columns are: " + str(data.columns))
        return data

    except Exception as e:
        print(colored(f"Error reading the XML file: {str(e)}", "red"))
        return None

def save_to_csv(data, working_directory, filename):
    timestamp = datetime.now().strftime('%Y-%m-%d')
    output_filename = os.path.join(working_directory, f"{filename}-recommended_commands-{timestamp}.csv")
    try:
        data.to_csv(output_filename, index=False)
        print(f"\nOutput file saved to {output_filename}\n")
        return output_filename
    except PermissionError:
        print(colored(f"Error: Permission denied when trying to save to {output_filename}. Please check the file and directory permissions.", "red"))
        return None
    except Exception as e:
        print(f"Error saving the CSV file: {e}")
        return None

def apply_example_commands(data, file_path):
    try:
        with open(file_path, 'r') as f:
            first_line = f.readline().strip()
        
        is_xml = first_line.startswith('<?xml')
        
        target_column = 'service' if is_xml else 'name'
        
        if target_column not in data.columns:
            print(colored(f"Error: '{target_column}' column not found in the data.", "red"))
            return data

        def get_command(service_name):
            if service_name == "unknown":
                return "Consider manual inspection or using a tool like nmap's version detection."
            return EXAMPLE_COMMANDS.get(service_name, 'N/A')
        
        data['example_command'] = data[target_column].apply(get_command)

        if 'name' in data.columns:
            data.rename(columns={'name': 'service'}, inplace=True)

        print_debug("Debug: After renaming, DataFrame columns are: " + str(data.columns))
        return data
    except Exception as e:
        print(colored(f"Error applying example commands: {str(e)}", "red"))
        return None
