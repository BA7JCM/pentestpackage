#!/bin/bash

output_dir=$1  # Directory to store results

# Metasploit one-liner for default community strings
metasploit_oneliner() {
    echo "Enter the IP address, range, or path to a file with IPs (e.g., 192.168.1.1, 192.168.1.0/24, or /path/to/file.txt):"
    read -e ip_input  # '-e' enables autocompletion

    # Check if the input is a file
    if [ -f "$ip_input" ]; then
        rhosts_input="file:$ip_input"
        echo "Using IP list from file: $ip_input"
    else
        # Validate IP address or range
        if [[ ! $ip_input =~ ^[0-9./]+$ ]]; then
            echo "Invalid IP address or range format."
            return 1
        fi

        # Create a temporary file to hold the IP/range
        ip_file="ip_temp.txt"
        echo $ip_input > "$ip_file"
        rhosts_input="file:$ip_file"
        echo "Using IP address/range: $ip_input"
    fi

    current_time=$(date +%Y%m%d%H%M%S)
    output_file="$output_dir/metasploit_oneliner_$current_time.txt"

    echo "Running Metasploit one-liner for default community strings..."
    if ! msfconsole -qx "use auxiliary/scanner/snmp/snmp_login; set RHOSTS $rhosts_input; run; exit" | tee "$output_file"; then
        echo "Error: Metasploit execution failed."
        [ -f "$ip_file" ] && rm "$ip_file"
        return 1
    fi

    [ -f "$ip_file" ] && rm "$ip_file"
    echo "Metasploit scan completed. Results saved in $output_file"
}



# Nmap for default community strings
nmap_snmp() {
    echo "Enter the IP address, range, or path to a file with IPs (e.g., 192.168.1.1, 192.168.1.0/24, or /path/to/file.txt):"
    read -e ip_input  # '-e' enables autocompletion

    # Determine how to handle the input (file or direct IP/range)
    if [ -f "$ip_input" ]; then
        target_input="-iL $ip_input"
        echo "Using IP list from file: $ip_input"
    else
        # Validate IP address or range
        if [[ ! $ip_input =~ ^[0-9./]+$ ]]; then
            echo "Invalid IP address or range format."
            return 1
        fi

        target_input="$ip_input"
        echo "Using IP address/range: $ip_input"
    fi

    current_time=$(date +%Y%m%d%H%M%S)
    output_file="$output_dir/nmap_snmp_$current_time.txt"

    echo "Running Nmap for default community strings..."
    if ! sudo nmap -sU -p 161 --script snmp-brute $target_input --open | tee "$output_file"; then
        echo "Error: Nmap execution failed."
        return 1
    fi

    echo "Nmap scan completed. Results saved in $output_file"
    parse_nmap_output "$output_file"
}

# Function to parse Nmap output and display a table of results
parse_nmap_output() {
    local file=$1
    echo "IP Address,Valid Credentials"
    awk '/Nmap scan report for/ {
            ip=$NF
         }
         /Valid credentials/ {
            getline; creds=$0
            while((getline) > 0 && $0 !~ /^MAC Address:/ && $0 !~ /^Nmap scan report for/) {
                creds = creds ", " $0
            }
            print ip "  " creds
            creds=""
         }' "$file"
}






# OneSixtyOne for default community strings
onesixtyone_snmp() {
    echo "Running OneSixtyOne for default community strings..."
    # Your OneSixtyOne command here
    # Save results to "$output_dir/onesixtyone_snmp_$current_time.txt"
}

# Function for SNMP check with default community strings
snmp_default_community() {
    while true; do
        echo "SNMP Default Community Strings Menu"
        echo "1. Metasploit One-Liner"
        echo "2. Nmap"
        echo "3. OneSixtyOne"
        echo "4. Back to SNMP Menu"
        echo -n "Enter your choice: "
        read choice
        current_time=$(date +%Y%m%d%H%M%S)

        case $choice in
            1) metasploit_oneliner;;
            2) nmap_snmp;;
            3) onesixtyone_snmp;;
            4) break;;
            *) echo "Invalid option";;
        esac
    done
}

# Function for SNMP enumeration
snmp_enum() {
    echo "Performing SNMP enumeration..."
    # Your code here
    # Save results to "$output_dir/snmp_enum_$current_time.txt"
}

# Function for getting an SNMP shell
snmp_shell() {
    echo "Getting SNMP shell..."
    # Your code here
    # Save results to "$output_dir/snmp_shell_$current_time.txt"
}

# Function for the SNMP menu
show_snmp_menu() {
    while true; do
        echo "SNMP Module Menu"
        echo "1. Default Community Strings"
        echo "2. SNMP Enumeration"
        echo "3. SNMP Shell"
        echo "4. Exit to Main Menu"
        echo -n "Enter your choice: "
        read choice
        current_time=$(date +%Y%m%d%H%M%S)

        case $choice in
            1) snmp_default_community;;
            2) snmp_enum;;
            3) snmp_shell;;
            4) exit 0;;
            *) echo "Invalid option";;
        esac
    done
}

# Main script execution
show_snmp_menu
