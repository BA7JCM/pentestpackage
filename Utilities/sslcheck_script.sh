#!/bin/bash

# Function to display banner
display_banner() {
    cat << "EOF"
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|e|n|t|e|s|t|P|a|c|k|a|g|e|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Script: sslcheck_script.sh
    Author: Leon Teale
    Twitter: @leonteale
    Website: cyberwolf-security.co.uk
    Version: 1.0.5
EOF
}

# Function to display usage
usage() {
    display_banner
    echo
    echo "Usage: $0 <input_file>"
    echo "Input file should contain IP and Port separated by a space on each line."
    exit 1
}

# Check if the user provided an input file
if [[ -z "$1" || "$1" == "--help" || "$1" == "-h" ]]; then
    usage
fi

# Check if the provided input file exists
if [[ ! -f "$1" ]]; then
    echo "Error: File '$1' not found!"
    exit 1
fi

# Determine the width of the IP Address column
max_ip_port_width=$(awk '{if (length($1":"$2) > max) max = length($1":"$2);} END {print max;}' $1)

# Determine the width of the Supported SSL/TLS Protocols column
max_protocol_width=$(while IFS=" " read -r IP PORT; do sslscan ${IP}:${PORT} 2>/dev/null | grep "enabled" | awk '{print $1}'; done < $1 | tr '\n' ' ' | awk '{if (length > max) max = length;} END {print max;}')

# Print the headers
header="IP Address:Port $(printf '%*s' $((max_ip_port_width - 15)) '') | Supported SSL/TLS Protocols $(printf '%*s' $((max_protocol_width - 27)) '')"
echo -e "$header"
echo -e "$(printf '%-*s' $((max_ip_port_width + 2)) '----------------')|$(printf '%-*s' $((max_protocol_width + 30)) '-----------------------------')"

while IFS=" " read -r IP PORT; do 
    OUTPUT=$(sslscan --tlsall ${IP}:${PORT} 2>/dev/null | grep "enabled" | awk '{print $1}' | tr '\n' ' ')
    if [[ -z "$OUTPUT" ]]; then
        echo "Error scanning ${IP}:${PORT}. Skipping..."
        continue
    fi
    COLORED_OUTPUT=""
    for PROTOCOL in $OUTPUT; do
        case "$PROTOCOL" in
            "TLSv1.0"|"TLSv1.1")
                COLORED_OUTPUT+="\033[31m${PROTOCOL}\033[0m "
                ;;
            *)
                COLORED_OUTPUT+="\033[32m${PROTOCOL}\033[0m "
                ;;
        esac
    done
    echo -e "$(printf '%-*s' $((max_ip_port_width + 2)) "${IP}:${PORT}") | ${COLORED_OUTPUT}"
done < $1
