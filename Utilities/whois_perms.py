#!/usr/bin/env python3

import sys
import argparse
import csv
import socket
from termcolor import colored
import subprocess

def check_hosting(target):
    # Check if the target is a domain
    if not any(char.isdigit() for char in target):  # Simple check: If no digits, likely a domain
        try:
            ip = socket.gethostbyname(target)
            target = f"{target} ({ip})"
        except socket.gaierror:
            return "Domain resolution error"

    try:
        result = subprocess.run(['whois', ip if 'ip' in locals() else target], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode('utf-8')
        
        # RIPE format extraction
        netname_ripe = None
        description_ripe = None
        for line in output.split('\n'):
            if 'netname:' in line:
                netname_ripe = line.split(':')[1].strip()
            if 'descr:' in line:
                description_ripe = line.split(':')[1].strip()
        
        # ARIN format extraction
        netname_arin = None
        organization_arin = None
        for line in output.split('\n'):
            if 'NetName:' in line:
                netname_arin = line.split(':')[1].strip()
            if 'Organization:' in line:
                organization_arin = line.split(':')[1].strip()

        # If RIPE data is available, use it; otherwise, use ARIN data
        if netname_ripe or description_ripe:
            hosting_data = [netname_ripe, description_ripe]
        else:
            hosting_data = [netname_arin, organization_arin]

        hosting_data = [data for data in hosting_data if data is not None]
        
        return ', '.join(hosting_data) or "Unknown"
    except Exception as e:
        return "Error: " + str(e)

def check_permission(hosting):
    always_allowed = ["MICROSOFT", "AZURE", "AMAZON", "AWS", "GOOGLE"]
    
    for allow in always_allowed:
        for data in hosting.split(', '):
            if allow in data.upper():
                return colored("no permission to test required", "green")
    return colored("check if permission to test is required", "yellow")

def main(args):
    with open(args.file, "r") as f:
        targets = [line.strip() for line in f.readlines()]

    data = []
    for target in targets:
        hosting = check_hosting(target)
        permission = check_permission(hosting)
        data.append([target, hosting, permission])

    column_widths = compute_max_widths(data)

    header = "{:<{IP Address}}  {:<{Hosting}}  {:<{Permission}}".format(
        'IP Address', 'Hosting', 'Permission', **column_widths
    )
    print(colored(header, "blue"))
    print(colored("-" * (sum(list(column_widths.values())) + 6), "blue"))  # 6 accounts for spaces and padding

    for row in data:
        print("{:<{IP Address}}  {:<{Hosting}}  {:<{Permission}}".format(
            row[0], row[1], row[2], **column_widths
        ))

    # Write CSV if needed
    if args.output:
        with open("output.csv", "w", newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(["IP Address", "Hosting", "Permission"])
            for row in data:
                # Stripping terminal colors before writing to CSV
                writer.writerow([row[0], row[1], row[2].strip()])
                
def compute_max_widths(data):
    # Set minimum column widths (for headers)
    column_widths = {
        'IP Address': len('IP Address'),
        'Hosting': len('Hosting'),
        'Permission': len('Permission')
    }

    for row in data:
        column_widths['IP Address'] = max(column_widths['IP Address'], len(row[0]))
        column_widths['Hosting'] = max(column_widths['Hosting'], len(row[1]))
        column_widths['Permission'] = max(column_widths['Permission'], len(row[2].strip()))

    # Add some padding
    column_widths['IP Address'] += 2
    column_widths['Hosting'] += 2
    column_widths['Permission'] += 2

    return column_widths


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Check where IPs are hosted and if permission is required to test.")
    parser.add_argument("file", help="Path to the file containing list of IP addresses or hostnames (1 per line)")
    parser.add_argument("-o", "--output", action="store_true", help="Produce a .CSV output in the current working folder")
    args = parser.parse_args()

    if not args.file:
        parser.print_help()
        sys.exit(1)

    main(args)