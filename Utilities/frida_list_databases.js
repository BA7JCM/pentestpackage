Java.perform(function () {
    var File = Java.use('java.io.File');
    var SQLiteDatabase = Java.use('android.database.sqlite.SQLiteDatabase');

    // Get the package name dynamically
    var packageName = Java.use('android.app.ActivityThread').currentApplication().getApplicationContext().getPackageName();
    var dbPath = '/data/data/' + packageName + '/databases/';
    
    console.log("[*] Databases path: " + dbPath);
    
    var dbDir = File.$new(dbPath);
    
    if (dbDir.exists() && dbDir.isDirectory()) {
        var files = dbDir.listFiles();
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            if (file.isFile()) {
                try {
                    console.log("[*] Attempting to open file: " + file.getName());

                    // Use the correct method overload to open the database
                    var db = SQLiteDatabase.openDatabase.overload('java.lang.String', 'android.database.sqlite.SQLiteDatabase$CursorFactory', 'int').call(
                        SQLiteDatabase, file.getAbsolutePath(), null, SQLiteDatabase.OPEN_READONLY.value
                    );

                    console.log("[*] Opened database: " + file.getName());

                    // Get all tables in the database
                    var cursor = db.rawQuery("SELECT name FROM sqlite_master WHERE type='table'", null);
                    if (cursor.moveToFirst()) {
                        do {
                            var tableName = cursor.getString(0);
                            console.log("  [*] Found table: " + tableName);

                            // Query the table
                            var tableCursor = db.rawQuery("SELECT * FROM " + tableName, null);
                            if (tableCursor.moveToFirst()) {
                                do {
                                    var row = "";
                                    for (var j = 0; j < tableCursor.getColumnCount(); j++) {
                                        var columnName = tableCursor.getColumnName(j);
                                        var value;
                                        try {
                                            // Attempt to get the value as a string
                                            value = tableCursor.getString(j);
                                        } catch (e) {
                                            try {
                                                // Handle BLOB data
                                                value = tableCursor.getBlob(j);
                                                if (value) {
                                                    value = "0x" + Array.prototype.map.call(new Uint8Array(value), function (x) {
                                                        return ('00' + x.toString(16)).slice(-2);
                                                    }).join('');
                                                } else {
                                                    value = "null";
                                                }
                                            } catch (blobError) {
                                                // If both string and BLOB retrieval fail, log the error
                                                console.log("    [!] Error retrieving column '" + columnName + "': " + blobError.message);
                                                value = "error";
                                            }
                                        }
                                        row += columnName + ": " + value + " | ";
                                    }
                                    console.log("    " + row);
                                } while (tableCursor.moveToNext());
                            }
                            tableCursor.close();
                        } while (cursor.moveToNext());
                    }
                    cursor.close();
                    db.close();
                } catch (e) {
                    console.log("  [!] Error opening or reading file '" + file.getName() + "': " + e.message);
                    console.log(e.stack);
                }
            }
        }
    } else {
        console.log("[!] Databases directory does not exist or is not a directory");
    }
});
