Java.perform(function () {
    var File = Java.use('java.io.File');
    var SQLiteDatabase = Java.use('android.database.sqlite.SQLiteDatabase');

    // ANSI escape codes for colors
    var colors = {
        reset: "\x1b[0m",
        bright: "\x1b[1m",
        fg: {
            red: "\x1b[31m",
            green: "\x1b[32m",
            yellow: "\x1b[33m",
            cyan: "\x1b[36m",
            magenta: "\x1b[35m",
            blue: "\x1b[34m",
            grey: "\x1b[90m"
        }
    };

    // Get the package name dynamically
    var packageName = Java.use('android.app.ActivityThread').currentApplication().getApplicationContext().getPackageName();
    var basePath = '/data/data/' + packageName + '/';

    console.log(colors.bright + colors.fg.cyan + "[*] Base path: " + basePath + colors.reset);

    // Function to recursively find all files in a directory
    function findFiles(dir) {
        var files = [];
        var list = File.$new(dir).listFiles();
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var file = list[i];
                if (file.isDirectory()) {
                    files = files.concat(findFiles(file.getAbsolutePath()));
                } else {
                    files.push(file.getAbsolutePath());
                }
            }
        }
        return files;
    }

    // Function to check if a file is a valid SQLite database
    function isValidDatabase(filePath) {
        try {
            var db = SQLiteDatabase.openDatabase.overload('java.lang.String', 'android.database.sqlite.SQLiteDatabase$CursorFactory', 'int').call(
                SQLiteDatabase, filePath, null, SQLiteDatabase.OPEN_READONLY.value
            );
            var cursor = db.rawQuery("SELECT name FROM sqlite_master WHERE type='table'", null);
            cursor.close();
            db.close();
            return true;
        } catch (e) {
            return false;
        }
    }

    // Find all files under the base path
    var files = findFiles(basePath);
    var validDatabases = 0;

    for (var i = 0; i < files.length; i++) {
        var filePath = files[i];
        if (isValidDatabase(filePath)) {
            validDatabases++;
            try {
                // Use the correct method overload to open the database
                var db = SQLiteDatabase.openDatabase.overload('java.lang.String', 'android.database.sqlite.SQLiteDatabase$CursorFactory', 'int').call(
                    SQLiteDatabase, filePath, null, SQLiteDatabase.OPEN_READONLY.value
                );

                var hasTables = false;

                var cursor = db.rawQuery("SELECT name FROM sqlite_master WHERE type='table'", null);
                if (cursor.moveToFirst()) {
                    hasTables = true;
                    console.log(colors.bright + colors.fg.green + "[*] Reading database: " + filePath + colors.reset);
                    do {
                        var tableName = cursor.getString(0);
                        var tableCursor = db.rawQuery("SELECT * FROM " + tableName, null);

                        if (!tableCursor.moveToFirst()) {
                            console.log(colors.bright + colors.fg.grey + "  [*] Found table: " + tableName + " " + colors.fg.red + "<empty>" + colors.reset);
                        } else {
                            console.log(colors.bright + colors.fg.magenta + "  [*] Found table: " + tableName + colors.reset);

                            // Print table header
                            var header = "| ";
                            for (var j = 0; j < tableCursor.getColumnCount(); j++) {
                                header += tableCursor.getColumnName(j) + " | ";
                            }
                            console.log(colors.fg.blue + "    " + header + colors.reset);

                            // Print table rows
                            do {
                                var row = "| ";
                                for (var j = 0; j < tableCursor.getColumnCount(); j++) {
                                    var columnName = tableCursor.getColumnName(j);
                                    var value;
                                    try {
                                        // Attempt to get the value as a string
                                        value = tableCursor.getString(j);
                                    } catch (e) {
                                        try {
                                            // Handle BLOB data
                                            value = tableCursor.getBlob(j);
                                            if (value) {
                                                value = "0x" + Array.prototype.map.call(new Uint8Array(value), function (x) {
                                                    return ('00' + x.toString(16)).slice(-2);
                                                }).join('');
                                            } else {
                                                value = "null";
                                            }
                                        } catch (blobError) {
                                            // If both string and BLOB retrieval fail, log the error
                                            console.log(colors.fg.red + "    [!] Error retrieving column '" + columnName + "': " + blobError.message + colors.reset);
                                            value = "error";
                                        }
                                    }
                                    row += value + " | ";
                                }
                                console.log(colors.fg.yellow + "    " + row + colors.reset);
                            } while (tableCursor.moveToNext());
                        }

                        tableCursor.close();
                    } while (cursor.moveToNext());
                }
                cursor.close();
                db.close();

                if (!hasTables) {
                    console.log(colors.bright + colors.fg.green + "[*] Reading database: " + filePath + " " + colors.fg.red + "<empty>" + colors.reset);
                }
            } catch (e) {
                console.log(colors.fg.red + "  [!] Error opening or reading file '" + filePath + "': " + e.message + colors.reset);
            }
        }
    }

    if (validDatabases === 0) {
        console.log(colors.fg.red + "  [!] No valid databases found in: " + basePath + colors.reset);
    }
});
